part_qq = (2*((16*(-(gm**2*m**2) + (-gm**2 - 2*m**2 + s12 + s13 + s23)**2/4.)*&
         (-(gm**4*(8*m**4 + 4*(s14*s23 + s13*s24) + &
                 m**2*(40*s12 - 4*(s13 + s14 + s23 + s24))))/4. + &
           4*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
            (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                 m**2*(s13 + s14 + s23 + s24))/2.) + &
           (gm**2*(-32*m**4*s12 + &
                (2*m**2 - s12 - s13 - s14)*(m**2 - s23)*&
                 (6*gm**2 + 28*m**2 - 6*(s12 + s13 + s23)) + &
                (m**2 - s13)*(6*gm**2 + 28*m**2 - 6*(s12 + s13 + s23))*&
                 (2*m**2 - s12 - s23 - s24) - &
                8*(gm**2 + 4*m**2 - s12 - s13 - s23)*&
                 (2*m**4 + s14*s23 + s13*s24 - &
                   m**2*(s13 + s14 + s23 + s24))))/2.))/&
       (s12**2*(-2*m**2 + s12 + s13 + s23)**2) + &
      (16*((-(gm**2*m**2) + (-gm**2 - 2*m**2 + s12 + s14 + s24)**2/4.)*&
            (-(gm**4*(8*m**4 + 4*(s14*s23 + s13*s24) + &
                    m**2*(40*s12 - 4*(s13 + s14 + s23 + s24))))/4. + &
              4*(-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
               (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                    m**2*(s13 + s14 + s23 + s24))/2.) + &
              (gm**2*(96*m**6 - &
                   8*m**4*(24*s12 - s13 + 15*s14 - s23 + 15*s24) - &
                   4*(s12 + s14 + s24)*&
                    (-(s14*s23) - s13*s24 + 6*s14*s24 + &
                      3*s12*(s14 + s24)) + &
                   4*gm**2*(4*m**4 - s14*s23 + &
                      m**2*(-6*s12 + s13 - 5*s14 + s23 - 5*s24) - &
                      s13*s24 + 6*s14*s24 + 3*s12*(s14 + s24)) + &
                   4*m**2*(6*s12**2 + 5*s14**2 - 3*s14*s23 - &
                      s12*(s13 - 25*s14 + s23 - 25*s24) + 38*s14*s24 - &
                      s23*s24 + 5*s24**2 - s13*(s14 + 3*s24))))/4.) - &
           (2*(-2*m**2 + s12 + s14 + s24)*&
              ((-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
                 (-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                 (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                      m**2*(s13 + s14 + s23 + s24))/2.) + &
                gm**6*((s12*(-12*m**4 + &
                        4*m**2*&
                        (gm**2 + 2*m**2 - s12 - 2*s13 - 2*s14 - s24) + &
                        6*(-gm**2 - 2*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24)**2))/2. - &
                   (m**2 - s14)*&
                    (-3*m**4 + 3*m**2*s24 + &
                      ((m**2 - s23)*&
                        (9*gm**2 + 20*m**2 - &
                        9*(s12 + 2*s13 + 2*s14 + s24)))/4.) - &
                   (m**2 - s13)*&
                    (-3*m**4 + 3*m**2*s23 + &
                      ((m**2 - s24)*&
                         (9*gm**2 + 20*m**2 - &
                         9*(s12 + 2*s13 + 2*s14 + s24)))/4.)) + &
                (gm**2*(m**2*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
                      (4*m**4 - 2*s12*s14 + 2*s14*s23 + &
                        2*m**2*(5*s12 - 2*s13 - s23 - s24) + &
                        4*s13*s24 - 2*s14*s24) + &
                     ((-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                        (4*(gm**2 + 2*m**2 - s12 - s13 - s23)*&
                        (-4*m**4 + s14*(s23 - 6*s24) - &
                        m**2*(s13 - 5*s14 + s23 - 5*s24) + s13*s24) + &
                        8*m**2*&
                        (2*m**4 - s12*s13 - s13*s23 + 2*s14*s23 + &
                        m**2*(5*s12 - 2*s14 - s23 - s24) + s13*s24)))/&
                      4. - ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                        (2*(gm**2 + 2*m**2 - s12 - s13 - s23)*&
                        (4*m**4 + 6*s13*s23 - s14*s23 - s13*s24 + &
                        m**2*(-5*s13 + s14 - 5*s23 + s24)) + &
                        6*(-gm**2 - 2*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24)*&
                        (-4*m**4 + s12*(s13 + s14) + s13*s23 - &
                        3*s14*s23 - 3*s13*s24 + s14*s24 + &
                        2*m**2*(-5*s12 + s13 + s14 + s23 + s24))))/2.))/&
                 4. + (gm**2*(-2*m**2 + s12 + s13 + s14)*&
                   (2*m**2*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
                      (m**2 - s24) - &
                     3*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                      (gm**2 + 2*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                      (2*m**2 - s23 - s24)*&
                      (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                     2*m**2*(m**2 - s23)*&
                      (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 + &
                     2*m**2*(-2*m**2 + s12 + s23 + s24)*&
                      (3*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-gm**2 - 2*m**2 + s12 + s14 + s24) - &
                        gm**2*&
                        (7*gm**2 + 12*m**2 - &
                        7*(s12 + 2*s13 + 2*s14 + s24))) + &
                     2*gm**2*&
                      ((2*m**2 - s23 - s24)*&
                        (3*gm**4 + 8*m**4 + &
                        6*gm**2*(2*m**2 - s12 - 2*s13 - 2*s14 - s24) - &
                        12*m**2*(s12 + 2*s13 + 2*s14 + s24) + &
                        3*(s12 + 2*s13 + 2*s14 + s24)**2) + &
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-2*m**4 + 2*m**2*s24 + &
                        ((m**2 - s23)*&
                        (3*gm**2 + 8*m**2 - &
                        3*(s12 + 2*s13 + 2*s14 + s24)))/4.) + &
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                         (-2*m**4 + 2*m**2*s23 + &
                         ((m**2 - s24)*&
                        (3*gm**2 + 8*m**2 - &
                        3*(s12 + 2*s13 + 2*s14 + s24)))/4.))))/4. + &
                gm**4*(-8*m**6*s12 - 4*m**4*(m**2 - s14)*(m**2 - s23) + &
                   m**2*(m**2 - s14)*(m**2 - s23)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                   (3*m**2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2)/&
                    2. - (3*(m**2 - s13)*(m**2 - s23)*&
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)**2)/4. - &
                   4*m**4*(m**2 - s13)*(m**2 - s24) + &
                   m**2*(m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (m**2 - s24) - &
                   3*(m**2 - s13)*(m**2 - s23)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (gm**2 + 2*m**2 - s12 - 2*s13 - 2*s14 - s24) + &
                   6*m**2*s12*&
                    (-gm**2 - 2*m**2 + s12 + 2*s13 + 2*s14 + s24)**2 + &
                   3*(m**2 - s14)*(m**2 - s23)*&
                    (-gm**2 - 2*m**2 + s12 + 2*s13 + 2*s14 + s24)**2 + &
                   3*(m**2 - s13)*(m**2 - s24)*&
                    (-gm**2 - 2*m**2 + s12 + 2*s13 + 2*s14 + s24)**2 - &
                   (3*(-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                      (m**4 + s14*s24 - m**2*(2*s12 + s14 + s24)))/4. + &
                   ((-2*m**2 + s12 + s23 + s24)*&
                      ((2*m**2 - s13 - s14)*&
                        (3*gm**4 + 8*m**4 + &
                        6*gm**2*(2*m**2 - s12 - 2*s13 - 2*s14 - s24) - &
                        12*m**2*(s12 + 2*s13 + 2*s14 + s24) + &
                        3*(s12 + 2*s13 + 2*s14 + s24)**2) - &
                        ((gm**2 + 2*m**2 - s12 - s13 - s23)*&
                        (3*gm**2*(m**2 - s13) + &
                        3*s13*(s12 + 2*s13 + 2*s14 + s24) - &
                        m**2*(3*s12 + 14*s13 - 2*s14 + 3*s24)))/4.))/2. + &
                   ((-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                      (2*m**2*(m**2 - s14)*(m**2 - s23) + &
                        2*m**2*(m**2 - s13)*(m**2 - s24) - &
                        6*(m**2 - s14)*(m**2 - s24)*&
                         (gm**2 + 2*m**2 - s12 - 2*s13 - 2*s14 - s24) + &
                        (-2*m**2 + s12 + s23 + s24)*&
                         (-2*m**4 + 2*m**2*s13 + &
                         ((m**2 - s14)*&
                        (3*gm**2 + 8*m**2 - &
                        3*(s12 + 2*s13 + 2*s14 + s24)))/4.) + &
                        ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                         (2*s12*&
                        (-9*gm**2 - 22*m**2 + &
                        9*(s12 + 2*s13 + 2*s14 + s24)) + &
                         10*(2*m**4 + s14*s23 + s13*s24 - &
                         m**2*(s13 + s14 + s23 + s24))))/4.))/2.)))/&
            (-2*m**2 + s12 + s13 + s23)))/&
       (s12**2*(-2*m**2 + s12 + s14 + s24)**2) + &
      (2*((-2*s12*(2*(-2*m**2 + s12 + s13 + s14)**2*&
                 (-((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                      (-2*m**2 + s12 + s23 + s24)) + &
                   4*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    ((s12*(-gm**2 - 2*m**2 + s12 + s13 + s23))/2. - &
                      ((m**2 - s14)*(-2*m**2 + s12 + s23 + s24))/4.) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)) - &
                      (m**2 - s24)*&
                       (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (-2*m**2 + s12 + s23 + s24))) + &
                gm**4*(-3*s12*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                   3*s12*(m**2 - s14)*&
                    (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                   6*(m**2 - s13)*(m**2 - s14)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   5*(-2*m**2 + s12 + s13 + s14)*&
                    (-2*m**4 - s14*s23 - s13*s24 - &
                      2*s12*(-gm**2 - 6*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24) + m**2*(s13 + s14 + s23 + s24))) + &
                2*gm**2*(-2*m**2 + s12 + s13 + s14)*&
                 (-3*s12*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                   s12*(-4*gm**2 - 11*m**2 + 4*s12 + 4*s13 + 3*s14 + &
                      4*s23)*(-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                   ((-8*(m**2 - s13)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                        8*(m**2 - s14)*&
                        (gm**2 + 5*m**2 - s12 - 3*s13 - s14 - s24))*&
                      (-2*m**2 + s12 + s23 + s24))/4. - &
                   (2*m**2 - s12 - s13 - s14)*&
                    (26*m**4 + 4*s12**2 + 8*s12*s13 + 8*s12*s14 + &
                      s12*s23 + 3*s13*s23 + 5*s14*s23 - s23**2 + &
                      gm**2*(2*m**2 - 4*s12 - s23 - s24) + 5*s12*s24 + &
                      5*s13*s24 + 3*s14*s24 + 2*s23*s24 + s24**2 - &
                      4*m**2*(7*s12 + 2*s13 + 2*s14 + 3*s23 + 4*s24)))))/&
            ((-gm**2 - m**2 + s12 + s13 + s14)*&
              (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)) - &
           (s12*(4*(-2*m**2 + s12 + s23 + s24)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) - &
                2*gm**4*(-3*s12*(m**2 - s23)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                   6*(-2*m**2 + s12 + s13 + s14)*(m**2 - s23)*&
                    (m**2 - s24) - &
                   3*s12*(m**2 - s24)*&
                    (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                   5*(-2*m**2 + s12 + s23 + s24)*&
                    (-2*m**4 - s14*s23 - s13*s24 - &
                      2*s12*(-gm**2 - 6*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24) + m**2*(s13 + s14 + s23 + s24))) + &
                4*gm**2*(-2*m**2 + s12 + s23 + s24)*&
                 (3*s12*(m**2 - s23)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                   s12*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-4*gm**2 - 11*m**2 + 4*s12 + 4*s13 + 4*s23 + 3*s24) &
- (2*m**2 - s12 - s23 - s24)*&
                    (2*m**4 - 2*s12**2 - 3*s12*s13 + s13**2 + &
                      gm**2*(2*m**2 + 2*s12 - s13 - s14) + &
                      2*m**2*(5*s12 - s13 - s14) - 3*s12*s14 + s14**2 + &
                      s13*s23 - s14*s23 - 2*s12*s24 - s13*s24 + s14*s24) &
+ (-2*m**2 + s12 + s13 + s14)*&
                    (2*(m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                      2*(m**2 - s24)*&
                       (gm**2 + 5*m**2 - s12 - s14 - 3*s23 - s24) + &
                      (-2*m**2 + s12 + s23 + s24)*&
                       (2*gm**2 + 14*m**2 - &
                         2*(s12 + 2*s13 + 2*s14 + s24))))))/&
            ((-gm**2 - m**2 + s12 + s23 + s24)*&
              (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)) + &
           8*((-2*m**2 + s12 + s13 + s14)*&
               (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
               (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
               (-2*m**2 + s12 + s23 + s24) + &
              (gm**4*(2*m**4 + s14*s23 + s13*s24 - &
                   s12*(-gm**2 - 12*m**2 + s12 + 2*s13 + 2*s14 + s24) - &
                   m**2*(s13 + s14 + s23 + s24)))/2. + &
              (gm**2*(-((m**2 - s13)*&
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                      (-2*m**2 + s12 + s23 + s24)) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)) - &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      2*(-2*m**2 + s12 + s23 + s24)*&
                       (2*gm**2 + 14*m**2 - &
                         2*(s12 + 2*s13 + 2*s14 + s24)))))/4.) - &
           (2*(2*gm**6*s12*(-52*m**2 + 20*s12 + &
                   13*(s13 + s14 + s23 + s24)) - &
                2*(s13**2 - s14**2 + 2*s14*s23 - s23**2 - 2*s13*s24 + &
                   s24**2)*(-(s13*s14*s23) - s14**2*s23 - s14*s23**2 + &
                   s13**2*s24 + s13*s14*s24 + s13*s23*s24 - &
                   s14*s23*s24 + s13*s24**2 + &
                   4*m**4*(s13 - s14 - s23 + s24) + &
                   s12**2*(s13 - s14 - s23 + s24) + &
                   s12*(s13**2 - s14**2 - 2*s14*s23 - s23**2 + &
                      2*s13*s24 + s24**2) + &
                   m**2*(-s13**2 + s14**2 + 6*s14*s23 + s23**2 - &
                      6*s13*s24 - s24**2 - 4*s12*(s13 - s14 - s23 + s24)&
)) - 2*gm**4*(400*m**4*s12 + 40*s12**3 - s14*s23*(s14 + s23 - s24) - &
                   s13**2*s24 + &
                   s12**2*(63*s13 + 63*s14 + 43*s23 + 53*s24) + &
                   s13*((s23 - s24)*s24 + s14*(s23 + s24)) - &
                   m**2*(252*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(49*s13 + 49*s14 + 37*s23 + 43*s24)) + &
                   s12*(21*s13**2 + 21*s14**2 + 38*s14*s23 + 9*s23**2 + &
                      44*s14*s24 + 32*s23*s24 + 15*s24**2 + &
                      s13*(50*s14 + 38*s23 + 44*s24))) - &
                gm**2*(960*m**6*s12 - 40*s12**4 - &
                   20*s12**3*(5*s13 + 5*s14 + 3*s23 + 4*s24) + &
                   8*(s14*s23 - s13*s24)**2 - &
                   8*m**4*(140*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      10*s12*(9*s13 + 9*s14 + 7*s23 + 8*s24)) - &
                   4*s12**2*(16*s13**2 + 16*s14**2 + 26*s14*s23 + &
                      6*s23**2 + 31*s14*s24 + 21*s23*s24 + 11*s24**2 + &
                      s13*(36*s14 + 26*s23 + 31*s24)) - &
                   s12*(12*s13**3 + 12*s14**3 + &
                      2*s24*(s23 + s24)*(7*s23 + 3*s24) + &
                      s14**2*(28*s23 + 34*s24) + &
                      s13**2*(44*s14 + 28*s23 + 34*s24) + &
                      8*s14*(3*s23**2 + 10*s23*s24 + 4*s24**2) + &
                      4*s13*(11*s14**2 + 20*s14*s23 + 6*s23**2 + &
                         23*s14*s24 + 20*s23*s24 + 8*s24**2)) + &
                   8*m**2*(50*s12**3 + &
                      10*s12**2*(7*s13 + 7*s14 + 5*s23 + 6*s24) - &
                      2*(s13 - s14 - s23 + s24)*(-(s14*s23) + s13*s24) + &
                      s12*(18*s13**2 + 18*s14**2 + 8*s23**2 + &
                         29*s23*s24 + 13*s24**2 + &
                         5*s14*(8*s23 + 9*s24) + &
                         s13*(44*s14 + 40*s23 + 45*s24))))))/&
            (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24) + &
           (-4*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
               ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                  (-2*m**2 + s12 + s23 + s24) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  ((m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                    2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                     (2*m**2 - s12 - s23 - s24) + &
                    (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) + &
                 (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                  (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                    (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
              2*gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                 30*s12**2*s13 + 20*s12*s13**2 + 23*s12**2*s14 + &
                 26*s12*s13*s14 + 6*s12*s14**2 + 10*s12**2*s23 + &
                 20*s12*s13*s23 + 28*s12*s14*s23 + 11*s13*s14*s23 + &
                 6*s14**2*s23 + 5*s14*s23**2 + 13*s12**2*s24 + &
                 24*s12*s13*s24 + 11*s13**2*s24 + 9*s12*s14*s24 + &
                 18*s13*s14*s24 + 6*s14**2*s24 + 10*s12*s23*s24 + &
                 5*s13*s23*s24 + 3*s14*s23*s24 + 3*s12*s24**2 + &
                 3*s13*s24**2 + &
                 m**4*(96*s12 + 72*s13 + 52*s14 + 48*s23 + 40*s24) - &
                 m**2*(58*s12**2 + 11*s13**2 + 29*s13*s14 + &
                    12*s14**2 + 12*s13*s23 + 53*s14*s23 + 5*s23**2 + &
                    68*s13*s24 + 7*s14*s24 + 8*s23*s24 + 3*s24**2 + &
                    2*s12*(55*s13 + 57*s14 + 13*s23 + 36*s24)) - &
                 gm**2*(16*m**4 + 20*s12**2 + 30*s12*s13 + 23*s12*s14 + &
                    10*s12*s23 + 8*s14*s23 + 13*s12*s24 + 8*s13*s24 - &
                    2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
              gm**2*(2*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                  (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2 + &
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                     (-16*m**2*s12 + &
                       4*(m**2 - s14)*(m**2 + s12 + s23 - 2*s24)) - &
                    4*m**2*(m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                 4*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                  ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                     (4*m**4 - 2*gm**2*s12 + 2*s12**2 + 5*s12*s13 + &
                       4*s12*s14 + s13*s23 + s14*s23 + 2*s12*s24 + &
                       2*s13*s24 - &
                       m**2*(s12 + 3*s13 + s14 + 2*s23 + 2*s24)) + &
                    (2*m**2 - s12 - s23 - s24)*&
                     (14*m**4 + 3*gm**2*(m**2 - s14) + &
                       3*s14*(s12 + 2*s13 + 2*s14 + s24) - &
                       m**2*(3*s12 + 2*s13 + 24*s14 + 3*s24))) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  (-4*(m**2 - s23)*&
                     (-gm**2 - 2*m**2 + s12 + s13 + s23)**2 - &
                    8*m**2*(m**2 - s24)*&
                     (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                     (-72*m**4 - 20*gm**2*(m**2 - s24) - &
                       4*s24*(5*s12 + 6*s13 + 8*s14 + 5*s24) + &
                       4*m**2*(5*s12 + 6*s13 + 8*s14 - 4*s23 + 27*s24)) &
+ 8*(-2*m**2 + s12 + s23 + s24)*&
                     (2*gm**4 + 26*m**4 + &
                       2*(s12 + s13 + s23)*(s12 + 2*s13 + 2*s14 + s24) - &
                       3*m**2*(5*s12 + 7*s13 + 4*s14 + 3*s23 + 2*s24) + &
                       gm**2*(15*m**2 - &
                         2*(2*s12 + 3*s13 + 2*s14 + s23 + s24))))))/&
            (-2*m**2 + s12 + s13 + s23) - &
           (2*(-2*(-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
                gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                   23*s12**2*s13 + 6*s12*s13**2 + 30*s12**2*s14 + &
                   26*s12*s13*s14 + 20*s12*s14**2 + 3*s12**2*s23 + &
                   6*s12*s13*s23 + 6*s13**2*s23 + 14*s12*s14*s23 + &
                   18*s13*s14*s23 + 11*s14**2*s23 - 6*s13*s23**2 + &
                   20*s12**2*s24 + 31*s12*s13*s24 + 6*s13**2*s24 + &
                   30*s12*s14*s24 + 11*s13*s14*s24 + 3*s12*s23*s24 + &
                   6*s13*s23*s24 + 8*s14*s23*s24 + 10*s12*s24**2 + &
                   8*s13*s24**2 + &
                   4*m**4*(24*s12 + 13*s13 + 18*s14 + 7*s23 + 15*s24) - &
                   m**2*(58*s12**2 + 12*s13**2 + 29*s13*s14 + &
                      11*s14**2 - 2*s13*s23 + 65*s14*s23 - 6*s23**2 + &
                      62*s13*s24 + 15*s14*s24 + 14*s23*s24 + 8*s24**2 + &
                      2*s12*(57*s13 + 55*s14 + 15*s23 + 34*s24)) - &
                   gm**2*(16*m**4 + 20*s12**2 + 23*s12*s13 + &
                      30*s12*s14 + 3*s12*s23 + 8*s14*s23 + 20*s12*s24 + &
                      8*s13*s24 - &
                      2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
                2*gm**2*(-2*m**2*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                    (4*m**4 - 4*gm**2*s12 + 4*s12**2 + 6*s12*s13 + &
                      5*s12*s14 + 2*s12*s23 + 2*s14*s23 + 2*s12*s24 + &
                      s13*s24 + s14*s24 - &
                      m**2*(5*s12 + s13 + 3*s14 + 2*s23 + 2*s24)) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-16*m**2*s12 + &
                        4*(m**2 - s13)*(m**2 + s12 - 2*s23 + s24)))/2. + &
                      (2*m**2 - s12 - s23 - s24)*&
                       (14*m**4 + 3*gm**2*(m**2 - s13) + &
                         3*s13*(s12 + 2*s13 + 2*s14 + s24) - &
                         m**2*(3*s12 + 24*s13 + 2*s14 + 3*s24))) + &
                   ((-2*m**2 + s12 + s13 + s14)*&
                      (-8*m**2*(m**2 - s23)*&
                         (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                        4*(m**2 - s24)*&
                         (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 - &
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                         (72*m**4 + 20*gm**2*(m**2 - s23) - &
                         4*m**2*&
                        (5*s12 + 8*s13 + 6*s14 + 24*s23 - s24) + &
                         4*s23*(5*s12 + 8*s13 + 6*s14 + 2*s23 + 3*s24)) &
+ 8*(-2*m**2 + s12 + s23 + s24)*&
                         (2*gm**4 + 26*m**4 + &
                         2*(s12 + s14 + s24)*&
                        (s12 + 2*s13 + 2*s14 + s24) - &
                         3*m**2*(5*s12 + 4*s13 + 7*s14 + 5*s24) + &
                         gm**2*&
                         (15*m**2 - 2*(2*s12 + 2*s13 + 3*s14 + 2*s24)))))/&
                    4.)))/(-2*m**2 + s12 + s14 + s24)))/s12**2 + &
      (2*((-2*(2*(-2*m**2 + s12 + s13 + s14)**2*&
                 (-((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                      (-2*m**2 + s12 + s23 + s24)) + &
                   4*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    ((s12*(-gm**2 - 2*m**2 + s12 + s13 + s23))/2. - &
                      ((m**2 - s14)*(-2*m**2 + s12 + s23 + s24))/4.) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)) - &
                      (m**2 - s24)*&
                       (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (-2*m**2 + s12 + s23 + s24))) + &
                gm**4*(-3*s12*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                   3*s12*(m**2 - s14)*&
                    (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                   6*(m**2 - s13)*(m**2 - s14)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   5*(-2*m**2 + s12 + s13 + s14)*&
                    (-2*m**4 - s14*s23 - s13*s24 - &
                      2*s12*(-gm**2 - 6*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24) + m**2*(s13 + s14 + s23 + s24))) + &
                2*gm**2*(-2*m**2 + s12 + s13 + s14)*&
                 (-3*s12*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                   s12*(-4*gm**2 - 11*m**2 + 4*s12 + 4*s13 + 3*s14 + &
                      4*s23)*(-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                   ((-8*(m**2 - s13)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                        8*(m**2 - s14)*&
                        (gm**2 + 5*m**2 - s12 - 3*s13 - s14 - s24))*&
                      (-2*m**2 + s12 + s23 + s24))/4. - &
                   (2*m**2 - s12 - s13 - s14)*&
                    (26*m**4 + 4*s12**2 + 8*s12*s13 + 8*s12*s14 + &
                      s12*s23 + 3*s13*s23 + 5*s14*s23 - s23**2 + &
                      gm**2*(2*m**2 - 4*s12 - s23 - s24) + 5*s12*s24 + &
                      5*s13*s24 + 3*s14*s24 + 2*s23*s24 + s24**2 - &
                      4*m**2*(7*s12 + 2*s13 + 2*s14 + 3*s23 + 4*s24)))))/&
            (gm**2 + m**2 - s12 - s13 - s14) - &
           (4*(-2*m**2 + s12 + s23 + s24)**2*&
               ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                  (-2*m**2 + s12 + s23 + s24) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  ((m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                    2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                     (2*m**2 - s12 - s23 - s24) + &
                    (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) + &
                 (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                  (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                    (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) - &
              2*gm**4*(-3*s12*(m**2 - s23)*&
                  (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                 6*(-2*m**2 + s12 + s13 + s14)*(m**2 - s23)*&
                  (m**2 - s24) - &
                 3*s12*(m**2 - s24)*&
                  (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                 5*(-2*m**2 + s12 + s23 + s24)*&
                  (-2*m**4 - s14*s23 - s13*s24 - &
                    2*s12*(-gm**2 - 6*m**2 + s12 + 2*s13 + 2*s14 + &
                       s24) + m**2*(s13 + s14 + s23 + s24))) + &
              4*gm**2*(-2*m**2 + s12 + s23 + s24)*&
               (3*s12*(m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                 s12*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                  (-4*gm**2 - 11*m**2 + 4*s12 + 4*s13 + 4*s23 + 3*s24) - &
                 (2*m**2 - s12 - s23 - s24)*&
                  (2*m**4 - 2*s12**2 - 3*s12*s13 + s13**2 + &
                    gm**2*(2*m**2 + 2*s12 - s13 - s14) + &
                    2*m**2*(5*s12 - s13 - s14) - 3*s12*s14 + s14**2 + &
                    s13*s23 - s14*s23 - 2*s12*s24 - s13*s24 + s14*s24) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  (2*(m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                    2*(m**2 - s24)*&
                     (gm**2 + 5*m**2 - s12 - s14 - 3*s23 - s24) + &
                    (-2*m**2 + s12 + s23 + s24)*&
                     (2*gm**2 + 14*m**2 - 2*(s12 + 2*s13 + 2*s14 + s24)))&
))/(gm**2 + m**2 - s12 - s23 - s24) + &
           8*((-2*m**2 + s12 + s13 + s14)*&
               (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
               (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
               (-2*m**2 + s12 + s23 + s24) + &
              (gm**4*(2*m**4 + s14*s23 + s13*s24 - &
                   s12*(-gm**2 - 12*m**2 + s12 + 2*s13 + 2*s14 + s24) - &
                   m**2*(s13 + s14 + s23 + s24)))/2. + &
              (gm**2*(-((m**2 - s13)*&
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                      (-2*m**2 + s12 + s23 + s24)) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)) - &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      2*(-2*m**2 + s12 + s23 + s24)*&
                       (2*gm**2 + 14*m**2 - &
                         2*(s12 + 2*s13 + 2*s14 + s24)))))/4.) - &
           (16*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              ((-2*m**2 + s12 + s13 + s14)*&
                 (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                 (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                 (-2*m**2 + s12 + s23 + s24) + &
                (gm**4*(2*m**4 + s14*s23 + s13*s24 - &
                     s12*(-gm**2 - 12*m**2 + s12 + 2*s13 + 2*s14 + &
                        s24) - m**2*(s13 + s14 + s23 + s24)))/2. + &
                (gm**2*(-((m**2 - s13)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-2*m**2 + s12 + s23 + s24)) + &
                     (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                      (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                        (m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                     (-2*m**2 + s12 + s13 + s14)*&
                      (-((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23)) - &
                        (m**2 - s24)*&
                        (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                        2*(-2*m**2 + s12 + s23 + s24)*&
                         (2*gm**2 + 14*m**2 - &
                         2*(s12 + 2*s13 + 2*s14 + s24)))))/4.))/s12 + &
           (2*(2*gm**6*s12*(-52*m**2 + 20*s12 + &
                   13*(s13 + s14 + s23 + s24)) - &
                2*(s13**2 - s14**2 + 2*s14*s23 - s23**2 - 2*s13*s24 + &
                   s24**2)*(-(s13*s14*s23) - s14**2*s23 - s14*s23**2 + &
                   s13**2*s24 + s13*s14*s24 + s13*s23*s24 - &
                   s14*s23*s24 + s13*s24**2 + &
                   4*m**4*(s13 - s14 - s23 + s24) + &
                   s12**2*(s13 - s14 - s23 + s24) + &
                   s12*(s13**2 - s14**2 - 2*s14*s23 - s23**2 + &
                      2*s13*s24 + s24**2) + &
                   m**2*(-s13**2 + s14**2 + 6*s14*s23 + s23**2 - &
                      6*s13*s24 - s24**2 - 4*s12*(s13 - s14 - s23 + s24)&
)) - 2*gm**4*(400*m**4*s12 + 40*s12**3 - s14*s23*(s14 + s23 - s24) - &
                   s13**2*s24 + &
                   s12**2*(63*s13 + 63*s14 + 43*s23 + 53*s24) + &
                   s13*((s23 - s24)*s24 + s14*(s23 + s24)) - &
                   m**2*(252*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(49*s13 + 49*s14 + 37*s23 + 43*s24)) + &
                   s12*(21*s13**2 + 21*s14**2 + 38*s14*s23 + 9*s23**2 + &
                      44*s14*s24 + 32*s23*s24 + 15*s24**2 + &
                      s13*(50*s14 + 38*s23 + 44*s24))) - &
                gm**2*(960*m**6*s12 - 40*s12**4 - &
                   20*s12**3*(5*s13 + 5*s14 + 3*s23 + 4*s24) + &
                   8*(s14*s23 - s13*s24)**2 - &
                   8*m**4*(140*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      10*s12*(9*s13 + 9*s14 + 7*s23 + 8*s24)) - &
                   4*s12**2*(16*s13**2 + 16*s14**2 + 26*s14*s23 + &
                      6*s23**2 + 31*s14*s24 + 21*s23*s24 + 11*s24**2 + &
                      s13*(36*s14 + 26*s23 + 31*s24)) - &
                   s12*(12*s13**3 + 12*s14**3 + &
                      2*s24*(s23 + s24)*(7*s23 + 3*s24) + &
                      s14**2*(28*s23 + 34*s24) + &
                      s13**2*(44*s14 + 28*s23 + 34*s24) + &
                      8*s14*(3*s23**2 + 10*s23*s24 + 4*s24**2) + &
                      4*s13*(11*s14**2 + 20*s14*s23 + 6*s23**2 + &
                         23*s14*s24 + 20*s23*s24 + 8*s24**2)) + &
                   8*m**2*(50*s12**3 + &
                      10*s12**2*(7*s13 + 7*s14 + 5*s23 + 6*s24) - &
                      2*(s13 - s14 - s23 + s24)*(-(s14*s23) + s13*s24) + &
                      s12*(18*s13**2 + 18*s14**2 + 8*s23**2 + &
                         29*s23*s24 + 13*s24**2 + &
                         5*s14*(8*s23 + 9*s24) + &
                         s13*(44*s14 + 40*s23 + 45*s24))))))/s12 - &
           ((-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (-4*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
                2*gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                   30*s12**2*s13 + 20*s12*s13**2 + 23*s12**2*s14 + &
                   26*s12*s13*s14 + 6*s12*s14**2 + 10*s12**2*s23 + &
                   20*s12*s13*s23 + 28*s12*s14*s23 + 11*s13*s14*s23 + &
                   6*s14**2*s23 + 5*s14*s23**2 + 13*s12**2*s24 + &
                   24*s12*s13*s24 + 11*s13**2*s24 + 9*s12*s14*s24 + &
                   18*s13*s14*s24 + 6*s14**2*s24 + 10*s12*s23*s24 + &
                   5*s13*s23*s24 + 3*s14*s23*s24 + 3*s12*s24**2 + &
                   3*s13*s24**2 + &
                   m**4*(96*s12 + 72*s13 + 52*s14 + 48*s23 + 40*s24) - &
                   m**2*(58*s12**2 + 11*s13**2 + 29*s13*s14 + &
                      12*s14**2 + 12*s13*s23 + 53*s14*s23 + 5*s23**2 + &
                      68*s13*s24 + 7*s14*s24 + 8*s23*s24 + 3*s24**2 + &
                      2*s12*(55*s13 + 57*s14 + 13*s23 + 36*s24)) - &
                   gm**2*(16*m**4 + 20*s12**2 + 30*s12*s13 + &
                      23*s12*s14 + 10*s12*s23 + 8*s14*s23 + &
                      13*s12*s24 + 8*s13*s24 - &
                      2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
                gm**2*(2*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2 + &
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (-16*m**2*s12 + &
                        4*(m**2 - s14)*(m**2 + s12 + s23 - 2*s24)) - &
                      4*m**2*(m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                   4*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (4*m**4 - 2*gm**2*s12 + 2*s12**2 + 5*s12*s13 + &
                        4*s12*s14 + s13*s23 + s14*s23 + 2*s12*s24 + &
                        2*s13*s24 - &
                        m**2*(s12 + 3*s13 + s14 + 2*s23 + 2*s24)) + &
                      (2*m**2 - s12 - s23 - s24)*&
                       (14*m**4 + 3*gm**2*(m**2 - s14) + &
                         3*s14*(s12 + 2*s13 + 2*s14 + s24) - &
                         m**2*(3*s12 + 2*s13 + 24*s14 + 3*s24))) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-4*(m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23)**2 - &
                      8*m**2*(m**2 - s24)*&
                       (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (-72*m**4 - 20*gm**2*(m**2 - s24) - &
                         4*s24*(5*s12 + 6*s13 + 8*s14 + 5*s24) + &
                         4*m**2*(5*s12 + 6*s13 + 8*s14 - 4*s23 + 27*s24)&
) + 8*(-2*m**2 + s12 + s23 + s24)*&
                       (2*gm**4 + 26*m**4 + &
                         2*(s12 + s13 + s23)*&
                        (s12 + 2*s13 + 2*s14 + s24) - &
                         3*m**2*&
                        (5*s12 + 7*s13 + 4*s14 + 3*s23 + 2*s24) + &
                         gm**2*&
                         (15*m**2 - &
                         2*(2*s12 + 3*s13 + 2*s14 + s23 + s24)))))))/&
            (s12*(-2*m**2 + s12 + s13 + s23)) + &
           (2*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (-2*(-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
                gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                   23*s12**2*s13 + 6*s12*s13**2 + 30*s12**2*s14 + &
                   26*s12*s13*s14 + 20*s12*s14**2 + 3*s12**2*s23 + &
                   6*s12*s13*s23 + 6*s13**2*s23 + 14*s12*s14*s23 + &
                   18*s13*s14*s23 + 11*s14**2*s23 - 6*s13*s23**2 + &
                   20*s12**2*s24 + 31*s12*s13*s24 + 6*s13**2*s24 + &
                   30*s12*s14*s24 + 11*s13*s14*s24 + 3*s12*s23*s24 + &
                   6*s13*s23*s24 + 8*s14*s23*s24 + 10*s12*s24**2 + &
                   8*s13*s24**2 + &
                   4*m**4*(24*s12 + 13*s13 + 18*s14 + 7*s23 + 15*s24) - &
                   m**2*(58*s12**2 + 12*s13**2 + 29*s13*s14 + &
                      11*s14**2 - 2*s13*s23 + 65*s14*s23 - 6*s23**2 + &
                      62*s13*s24 + 15*s14*s24 + 14*s23*s24 + 8*s24**2 + &
                      2*s12*(57*s13 + 55*s14 + 15*s23 + 34*s24)) - &
                   gm**2*(16*m**4 + 20*s12**2 + 23*s12*s13 + &
                      30*s12*s14 + 3*s12*s23 + 8*s14*s23 + 20*s12*s24 + &
                      8*s13*s24 - &
                      2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
                2*gm**2*(-2*m**2*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                    (4*m**4 - 4*gm**2*s12 + 4*s12**2 + 6*s12*s13 + &
                      5*s12*s14 + 2*s12*s23 + 2*s14*s23 + 2*s12*s24 + &
                      s13*s24 + s14*s24 - &
                      m**2*(5*s12 + s13 + 3*s14 + 2*s23 + 2*s24)) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-16*m**2*s12 + &
                        4*(m**2 - s13)*(m**2 + s12 - 2*s23 + s24)))/2. + &
                      (2*m**2 - s12 - s23 - s24)*&
                       (14*m**4 + 3*gm**2*(m**2 - s13) + &
                         3*s13*(s12 + 2*s13 + 2*s14 + s24) - &
                         m**2*(3*s12 + 24*s13 + 2*s14 + 3*s24))) + &
                   ((-2*m**2 + s12 + s13 + s14)*&
                      (-8*m**2*(m**2 - s23)*&
                         (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                        4*(m**2 - s24)*&
                         (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 - &
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                         (72*m**4 + 20*gm**2*(m**2 - s23) - &
                         4*m**2*&
                        (5*s12 + 8*s13 + 6*s14 + 24*s23 - s24) + &
                         4*s23*(5*s12 + 8*s13 + 6*s14 + 2*s23 + 3*s24)) &
+ 8*(-2*m**2 + s12 + s23 + s24)*&
                         (2*gm**4 + 26*m**4 + &
                         2*(s12 + s14 + s24)*&
                        (s12 + 2*s13 + 2*s14 + s24) - &
                         3*m**2*(5*s12 + 4*s13 + 7*s14 + 5*s24) + &
                         gm**2*&
                         (15*m**2 - 2*(2*s12 + 2*s13 + 3*s14 + 2*s24)))))/&
                    4.)))/(s12*(-2*m**2 + s12 + s14 + s24))))/&
       (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)**2 + &
      (2*((2*(-2*m**2 + s12 + s23 + s24)**2*&
              (m**2*(6*gm**2 + 4*m**2)*(-2*m**2 + s12 + s13 + s14)*&
                 (-2*m**2 + s12 + s23 + s24) - &
                2*gm**4*(m**2*s12 + &
                   (2*m**4 + s14*s23 + s13*s24 - &
                      m**2*(s13 + s14 + s23 + s24))/2.) + &
                2*(-2*m**2 + s12 + s23 + s24)*&
                 (m**2*((m**2 - s13)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ 2*(-2*m**2 + s12 + s23 + s24)*&
                    (m**2*s12 + &
                      (2*m**4 + s14*s23 + s13*s24 - &
                        m**2*(s13 + s14 + s23 + s24))/2.)) + &
                gm**2*(-(m**2*s12*(-18*m**2 + 8*(s12 + s23 + s24))) + &
                   2*((m**2*(2*m**4 + s14*s23 + s13*s24 - &
                        m**2*(s13 + s14 + s23 + s24)))/2. + &
                      (-2*m**2 + s12 + s23 + s24)*&
                       ((3*(m**2 - s13)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23))/2. + &
                         (3*(m**2 - s14)*&
                        (-gm**2 - 2*m**2 + s12 + s14 + s24))/2. + &
                         2*(-2*m**4 - s14*s23 - s13*s24 + &
                         m**2*(s13 + s14 + s23 + s24)))))))/&
            (-gm**2 - m**2 + s12 + s23 + s24)**2 - &
           ((-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (-4*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
                2*gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                   30*s12**2*s13 + 20*s12*s13**2 + 23*s12**2*s14 + &
                   26*s12*s13*s14 + 6*s12*s14**2 + 10*s12**2*s23 + &
                   20*s12*s13*s23 + 28*s12*s14*s23 + 11*s13*s14*s23 + &
                   6*s14**2*s23 + 5*s14*s23**2 + 13*s12**2*s24 + &
                   24*s12*s13*s24 + 11*s13**2*s24 + 9*s12*s14*s24 + &
                   18*s13*s14*s24 + 6*s14**2*s24 + 10*s12*s23*s24 + &
                   5*s13*s23*s24 + 3*s14*s23*s24 + 3*s12*s24**2 + &
                   3*s13*s24**2 + &
                   m**4*(96*s12 + 72*s13 + 52*s14 + 48*s23 + 40*s24) - &
                   m**2*(58*s12**2 + 11*s13**2 + 29*s13*s14 + &
                      12*s14**2 + 12*s13*s23 + 53*s14*s23 + 5*s23**2 + &
                      68*s13*s24 + 7*s14*s24 + 8*s23*s24 + 3*s24**2 + &
                      2*s12*(55*s13 + 57*s14 + 13*s23 + 36*s24)) - &
                   gm**2*(16*m**4 + 20*s12**2 + 30*s12*s13 + &
                      23*s12*s14 + 10*s12*s23 + 8*s14*s23 + &
                      13*s12*s24 + 8*s13*s24 - &
                      2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
                gm**2*(2*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (4*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23)**2 + &
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (-16*m**2*s12 + &
                        4*(m**2 - s14)*(m**2 + s12 + s23 - 2*s24)) - &
                      4*m**2*(m**2 - s14)*(-2*m**2 + s12 + s23 + s24)) + &
                   4*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (4*m**4 - 2*gm**2*s12 + 2*s12**2 + 5*s12*s13 + &
                        4*s12*s14 + s13*s23 + s14*s23 + 2*s12*s24 + &
                        2*s13*s24 - &
                        m**2*(s12 + 3*s13 + s14 + 2*s23 + 2*s24)) + &
                      (2*m**2 - s12 - s23 - s24)*&
                       (14*m**4 + 3*gm**2*(m**2 - s14) + &
                         3*s14*(s12 + 2*s13 + 2*s14 + s24) - &
                         m**2*(3*s12 + 2*s13 + 24*s14 + 3*s24))) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    (-4*(m**2 - s23)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23)**2 - &
                      8*m**2*(m**2 - s24)*&
                       (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                      (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (-72*m**4 - 20*gm**2*(m**2 - s24) - &
                         4*s24*(5*s12 + 6*s13 + 8*s14 + 5*s24) + &
                         4*m**2*(5*s12 + 6*s13 + 8*s14 - 4*s23 + 27*s24)&
) + 8*(-2*m**2 + s12 + s23 + s24)*&
                       (2*gm**4 + 26*m**4 + &
                         2*(s12 + s13 + s23)*&
                        (s12 + 2*s13 + 2*s14 + s24) - &
                         3*m**2*&
                        (5*s12 + 7*s13 + 4*s14 + 3*s23 + 2*s24) + &
                         gm**2*&
                         (15*m**2 - &
                         2*(2*s12 + 3*s13 + 2*s14 + s23 + s24)))))))/&
            (s12*(-2*m**2 + s12 + s13 + s23)) + &
           (2*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (-2*(-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                 ((m**2 - s13)*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-2*m**2 + s12 + s13 + s14)*&
                    ((m**2 - s23)*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      2*(gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24)*&
                       (2*m**2 - s12 - s23 - s24) + &
                      (m**2 - s24)*(-gm**2 - 2*m**2 + s12 + s14 + s24)) &
+ (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (-2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                      (m**2 - s14)*(-2*m**2 + s12 + s23 + s24))) + &
                gm**4*(-72*m**6 + 10*gm**4*s12 + 10*s12**3 + &
                   23*s12**2*s13 + 6*s12*s13**2 + 30*s12**2*s14 + &
                   26*s12*s13*s14 + 20*s12*s14**2 + 3*s12**2*s23 + &
                   6*s12*s13*s23 + 6*s13**2*s23 + 14*s12*s14*s23 + &
                   18*s13*s14*s23 + 11*s14**2*s23 - 6*s13*s23**2 + &
                   20*s12**2*s24 + 31*s12*s13*s24 + 6*s13**2*s24 + &
                   30*s12*s14*s24 + 11*s13*s14*s24 + 3*s12*s23*s24 + &
                   6*s13*s23*s24 + 8*s14*s23*s24 + 10*s12*s24**2 + &
                   8*s13*s24**2 + &
                   4*m**4*(24*s12 + 13*s13 + 18*s14 + 7*s23 + 15*s24) - &
                   m**2*(58*s12**2 + 12*s13**2 + 29*s13*s14 + &
                      11*s14**2 - 2*s13*s23 + 65*s14*s23 - 6*s23**2 + &
                      62*s13*s24 + 15*s14*s24 + 14*s23*s24 + 8*s24**2 + &
                      2*s12*(57*s13 + 55*s14 + 15*s23 + 34*s24)) - &
                   gm**2*(16*m**4 + 20*s12**2 + 23*s12*s13 + &
                      30*s12*s14 + 3*s12*s23 + 8*s14*s23 + 20*s12*s24 + &
                      8*s13*s24 - &
                      2*m**2*(29*s12 + 4*(s13 + s14 + s23 + s24)))) + &
                2*gm**2*(-2*m**2*(m**2 - s13)*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-2*m**2 + s12 + s23 + s24) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
                    (4*m**4 - 4*gm**2*s12 + 4*s12**2 + 6*s12*s13 + &
                      5*s12*s14 + 2*s12*s23 + 2*s14*s23 + 2*s12*s24 + &
                      s13*s24 + s14*s24 - &
                      m**2*(5*s12 + s13 + 3*s14 + 2*s23 + 2*s24)) + &
                   (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                        (-16*m**2*s12 + &
                        4*(m**2 - s13)*(m**2 + s12 - 2*s23 + s24)))/2. + &
                      (2*m**2 - s12 - s23 - s24)*&
                       (14*m**4 + 3*gm**2*(m**2 - s13) + &
                         3*s13*(s12 + 2*s13 + 2*s14 + s24) - &
                         m**2*(3*s12 + 24*s13 + 2*s14 + 3*s24))) + &
                   ((-2*m**2 + s12 + s13 + s14)*&
                      (-8*m**2*(m**2 - s23)*&
                         (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                        4*(m**2 - s24)*&
                         (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 - &
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                         (72*m**4 + 20*gm**2*(m**2 - s23) - &
                         4*m**2*&
                        (5*s12 + 8*s13 + 6*s14 + 24*s23 - s24) + &
                         4*s23*(5*s12 + 8*s13 + 6*s14 + 2*s23 + 3*s24)) &
+ 8*(-2*m**2 + s12 + s23 + s24)*&
                         (2*gm**4 + 26*m**4 + &
                         2*(s12 + s14 + s24)*&
                        (s12 + 2*s13 + 2*s14 + s24) - &
                         3*m**2*(5*s12 + 4*s13 + 7*s14 + 5*s24) + &
                         gm**2*&
                         (15*m**2 - 2*(2*s12 + 2*s13 + 3*s14 + 2*s24)))))/&
                    4.)))/(s12*(-2*m**2 + s12 + s14 + s24))))/&
       (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)**2 + &
      ((4*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
            (6*gm**6*(2*s12*(4*m**4 + gm**2*(m**2 - s13) - &
                    m**2*(s12 + 7*s13 + s14 + s24) + &
                    s13*(s12 + 2*s13 + 2*s14 + s24)) + &
                 (m**2 - s13)*&
                  (s14*s23 - s13*s24 + m**2*(s13 - s14 - s23 + s24))) + &
              8*(-2*m**2 + s12 + s13 + s14)**2*&
               (-gm**2 - 2*m**2 + s12 + s14 + s24)**2*&
               (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                    m**2*(s13 + s14 + s23 + s24))/2.) + &
              2*gm**2*(-2*m**2 + s12 + s13 + s14)*&
               (2*m**2*(-2*m**2 + s12 + s13 + s14)**2*(m**2 - s24) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  (8*m**4*s12 + 4*m**2*(m**2 - s14)*(m**2 - s23) + &
                    4*m**2*(m**2 - s13)*(m**2 - s24) - &
                    ((4*(m**2 - s23)*&
                       (3*gm**2 + 13*m**2 - 3*s12 - 6*s13 - &
                       7*s14 - 3*s24) + &
                       8*(5*m**2 - 2*s13)*(m**2 - s24))*&
                       (-gm**2 - 2*m**2 + s12 + s14 + s24))/4. + &
                    3*(m**2 - s24)*&
                     (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 + &
                    m**2*(-2*m**2 + s12 + s23 + s24)*&
                     (-3*gm**2 - 4*m**2 + 3*s12 + s14 + 3*s24)) + &
                 ((-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                    (2*(-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                       (5*m**4 - 3*s12*s14 + s14*s23 + &
                        m**2*(5*s12 - 4*s13 - s14 - s23 - 4*s24) + &
                        4*s13*s24) - &
                      6*(m**2 - s13)*&
                       (12*m**4 - s12*s14 + gm**2*(m**2 - s23) + &
                        s12*s23 + s13*s23 + 3*s14*s23 + s23**2 + &
                        m**2*(6*s12 - 5*s13 - 2*s14 - 8*s23 - 5*s24) + &
                        4*s13*s24 - s14*s24)))/2.) + &
              gm**4*(48*s12*(m**3 - m*s13)**2 + &
                 24*(m**2 - s13)**2*(m**2 - s14)*(m**2 - s23) - &
                 12*(m**2 - s13)**2*(m**2 - s23)*&
                  (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                 24*(m**2 - s13)**3*(m**2 - s24) - &
                 12*s12*(m**2 - s13)*(m**2 - s14)*&
                  (-gm**2 - 2*m**2 + s12 + s14 + s24) - &
                 12*(m**2 - s13)**2*(m**2 - s24)*&
                  (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                 3*s12*(m**2 - s14)*&
                  (-gm**2 - 2*m**2 + s12 + s14 + s24)**2 + &
                 2*(-2*m**2 + s12 + s13 + s14)**2*&
                  (-2*m**4 + &
                    (3*(m**2 - s23)*&
                       (gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24))/2. &
+ 2*m**2*s24) + (-2*m**2 + s12 + s23 + s24)*&
                  (26*m**6 + 3*gm**2*(m**2 - s13)*(m**2 - s14) - &
                    3*s13*s14*(s12 + 4*s13 + s14 + s24) - &
                    m**4*(19*s12 + 34*s13 + 33*s14 + 3*s24) + &
                    m**2*(21*s12*s13 + 6*s13**2 + s12*s14 + &
                       49*s13*s14 + s14**2 + 3*s13*s24 + 3*s14*s24)) - &
                 2*(-2*m**2 + s12 + s13 + s14)*&
                  (8*m**4*s12 + 4*m**2*(m**2 - s14)*(m**2 - s23) - &
                    3*m**2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                    6*(m**2 - s13)**2*(m**2 - s24) + &
                    (m**2 - s13)*&
                     (-8*m**4 - &
                       (3*(m**2 - s23)*&
                        (5*gm**2 + 18*m**2 - 5*s12 - 9*s13 - 8*s14 - &
                        s23 - 4*s24))/2. + 8*m**2*s24) + &
                    ((-gm**2 - 2*m**2 + s12 + s14 + s24)*&
                       ((m**2 - s14)*(m**2 - s23) + &
                         7*(m**2 - s13)*(m**2 - s24) - &
                         9*s12*&
                         (-gm**2 - 4*m**2 + s12 + 2*s13 + 2*s14 + s24)))/&
                     2.))))/&
          (s12*(-gm**2 - m**2 + s12 + s13 + s14)*&
            (-2*m**2 + s12 + s14 + s24)) - &
         (4*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
            (6*gm**6*(-((m**2 - s14)**2*(m**2 - s23)) + &
                 (m**2 - s13)*(m**2 - s14)*(m**2 - s24) + &
                 2*s12*(4*m**4 + gm**2*(m**2 - s14) + &
                    s14*(s12 + 2*s13 + 2*s14 + s24) - &
                    m**2*(s12 + s13 + 7*s14 + s24))) + &
              8*(-2*m**2 + s12 + s13 + s14)**2*&
               (-gm**2 - 2*m**2 + s12 + s13 + s23)**2*&
               (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                    m**2*(s13 + s14 + s23 + s24))/2.) + &
              2*gm**2*(-2*m**2 + s12 + s13 + s14)*&
               (2*m**2*(-2*m**2 + s12 + s13 + s14)**2*(m**2 - s23) + &
                 (-2*m**2 + s12 + s13 + s14)*&
                  (8*m**4*s12 + 4*m**2*(m**2 - s14)*(m**2 - s23) + &
                    3*(m**2 - s23)*&
                     (-gm**2 - 2*m**2 + s12 + s13 + s23)**2 - &
                    ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (8*(5*m**2 - 2*s14)*(m**2 - s23) + &
                        4*(3*gm**2 + 13*m**2 - 3*s12 - 7*s13 - &
                       6*s14 - 3*s24)*(m**2 - s24)))/4. + &
                    4*m**2*(m**2 - s13)*(m**2 - s24) + &
                    m**2*(-3*gm**2 - 4*m**2 + 3*s12 + s13 + 3*s23)*&
                     (-2*m**2 + s12 + s23 + s24)) + &
                 (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                  (-3*(m**2 - s14)*(m**2 - s24)*&
                     (gm**2 + 2*m**2 - s12 - s14 - s24) + &
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                     (5*m**4 - 3*s12*s13 + 4*s14*s23 + &
                       m**2*(5*s12 - s13 - 4*s14 - 4*s23 - s24) + &
                       s13*s24) - &
                    3*(m**2 - s14)*&
                     (10*m**4 - s12*s13 - s13*s23 + 4*s14*s23 + &
                       m**2*(7*s12 - 2*s13 - 4*s14 - 5*s23 - 5*s24) + &
                       3*s13*s24))) + &
              gm**4*(48*s12*(m**3 - m*s14)**2 + &
                 24*(m**2 - s14)**3*(m**2 - s23) - &
                 12*s12*(m**2 - s13)*(m**2 - s14)*&
                  (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                 12*(m**2 - s14)**2*(m**2 - s23)*&
                  (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                 3*s12*(m**2 - s13)*&
                  (-gm**2 - 2*m**2 + s12 + s13 + s23)**2 + &
                 2*(-2*m**2 + s12 + s13 + s14)**2*&
                  (-2*m**4 + 2*m**2*s23 + &
                    (3*(m**2 - s24)*&
                       (gm**2 + 4*m**2 - s12 - 2*s13 - 2*s14 - s24))/2.) &
+ 24*(m**2 - s13)*(m**2 - s14)**2*(m**2 - s24) - &
                 12*(m**2 - s14)**2*(m**2 - s24)*&
                  (-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                 (26*m**6 + 3*gm**2*(m**2 - s13)*(m**2 - s14) - &
                    3*s13*s14*(s12 + s13 + 4*s14 + s23) - &
                    m**4*(19*s12 + 33*s13 + 34*s14 + 3*s23) + &
                    m**2*(s12*s13 + s13**2 + 21*s12*s14 + 49*s13*s14 + &
                       6*s14**2 + 3*s13*s23 + 3*s14*s23))*&
                  (-2*m**2 + s12 + s23 + s24) - &
                 2*(-2*m**2 + s12 + s13 + s14)*&
                  (8*m**4*s12 - 6*(m**2 - s14)**2*(m**2 - s23) + &
                    4*m**2*(m**2 - s13)*(m**2 - s24) - &
                    3*m**2*s12*(-gm**2 - 2*m**2 + s12 + s14 + s24) + &
                    ((-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                       (7*(m**2 - s14)*(m**2 - s23) + &
                        (m**2 - s13)*(m**2 - s24) - &
                        9*s12*&
                        (-gm**2 - 4*m**2 + s12 + 2*s13 + 2*s14 + s24)))/&
                     2. - ((m**2 - s14)*&
                       (70*m**4 + 15*gm**2*(m**2 - s24) + &
                         3*s24*(5*s12 + 8*s13 + 9*s14 + 5*s24) - &
                         m**2*&
                         (15*s12 + 24*s13 + 27*s14 + 16*s23 + 69*s24)))/&
                     2.))))/&
          (s12*(-gm**2 - m**2 + s12 + s13 + s14)*&
            (-2*m**2 + s12 + s13 + s23)) + &
         ((-2*m**2 + s12 + s13 + s14)**2*&
            (2*gm**2*(gm**2 - m**2)*&
               (-4*m**4 + 2*m**2*(-2*s12 + s13 + s14 + s23 + s24) - &
                 2*(s14*s23 + s13*s24)) + &
              16*(-2*m**2 + s12 + s13 + s14)**2*&
               (m**2*s12 + (2*m**4 + s14*s23 + s13*s24 - &
                    m**2*(s13 + s14 + s23 + s24))/2.) + &
              4*(2*m**2 - s12 - s13 - s14)*&
               (gm**4*(6*m**2 - 3*(s23 + s24)) + &
                 2*m**2*(8*m**4 + s13*s23 + s23**2 + s14*s24 + s24**2 + &
                    s12*(s23 + s24) - &
                    m**2*(4*s12 + s13 + s14 + 5*s23 + 5*s24)) + &
                 gm**2*(36*m**4 + 3*s13*s23 + 4*s14*s23 + 3*s23**2 + &
                    4*s13*s24 + 3*s14*s24 + 3*s24**2 + &
                    3*s12*(s23 + s24) - &
                    m**2*(4*s12 + 7*(s13 + s14 + 3*(s23 + s24)))))))/&
          (-gm**2 - m**2 + s12 + s13 + s14)**2 + &
         (8*((-2*m**2 + s12 + s13 + s14)**2*&
               (3*gm**2*(gm**2 + m**2)*(m**2 - s23)*(m**2 - s24) - &
                 (-2*m**2 + s12 + s23 + s24)**2*&
                  (8*m**4 + 2*(s14*s23 + s13*s24) + &
                    m**2*(4*s12 - 2*(s13 + s14 + s23 + s24))) - &
                 ((2*m**2 - s12 - s23 - s24)*&
                    (4*gm**2*&
                       (6*m**4 - s14*s23 + &
                        m**2*(-8*s12 + s13 + s14 - 6*s23 - 6*s24) - &
                        s13*s24 + 6*s23*s24) + &
                      4*m**2*&
                       (4*m**4 + s13*s23 + s23**2 + s14*s24 + s24**2 + &
                         s12*(s23 + s24) - &
                         m**2*(2*s12 + s13 + s14 + 3*s23 + 3*s24))))/4.) &
+ 2*(-2*m**2 + s12 + s13 + s14)*&
               ((-2*m**2 + s12 + s23 + s24)*&
                  (m**2*s12*(-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                     (-gm**2 - 2*m**2 + s12 + s14 + s24) - &
                    (m**2*(-2*m**2 + s12 + s23 + s24)*&
                       ((m**2 - s13)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                        (m**2 - s14)*&
                        (-gm**2 - 2*m**2 + s12 + s14 + s24)))/2.) + &
                 (gm**4*(24*m**2*s12**2 - &
                      3*s12*((m**2 - s23)*&
                        (-gm**2 - 2*m**2 + s12 + s13 + s23) + &
                        (m**2 - s24)*&
                        (-gm**2 + 6*m**2 + s12 + s14 - 8*s23 + s24)) - &
                      (-2*m**2 + s12 + s23 + s24)*&
                       (2*s12*&
                        (-9*gm**2 - 38*m**2 + &
                        9*(s12 + 2*s13 + 2*s14 + s24)) + &
                        10*(2*m**4 + s14*s23 + s13*s24 - &
                        m**2*(s13 + s14 + s23 + s24)))))/4. + &
                 (gm**2*(-2*m**2 + s12 + s23 + s24)*&
                    (24*m**2*s12**2 - &
                      (2*m**2 - s12 - s23 - s24)*&
                       (4*m**4 + 6*s13*s14 - s14*s23 - s13*s24 + &
                        m**2*(-8*s12 - 5*s13 - 5*s14 + s23 + s24)) - &
                      4*m**2*&
                       (2*m**4 + s14*s23 + s13*s24 - &
                        m**2*(s13 + s14 + s23 + s24)) - &
                      (s12*(-344*m**4 + &
                        4*m**2*&
                        (19*s12 + 38*s13 + 38*s14 + 24*s23 + 31*s24) + &
                        gm**2*&
                       (-76*m**2 + 12*(s13 + s14 + s23 + s24)) - &
                        12*(s13**2 + s14**2 + 4*s14*s23 + s23**2 + &
                        2*s14*s24 + s24**2 + &
                        s12*(s13 + s14 + s23 + s24) + &
                        2*s13*(s23 + 2*s24))))/4.))/2.) - &
              (3*gm**2*(2*m**2*s12**2*&
                    (-gm**2 - 2*m**2 + s12 + s13 + s23)*&
                    (-gm**2 - 2*m**2 + s12 + s14 + s24) - &
                   2*(gm**2 + m**2)*(m**2 - s13)*(m**2 - s14)*&
                    (-2*m**2 + s12 + s23 + s24)**2 - &
                   gm**2*s12*(-2*m**2 + s12 + s23 + s24)*&
                    (8*m**2*s12 - &
                      (m**2 - s13)*&
                       (-gm**2 - 2*m**2 + s12 + s13 + s23) - &
                      (m**2 - s14)*&
                       (-gm**2 + 6*m**2 + s12 - 8*s13 + s14 + s24)) + &
                   2*gm**4*s12*&
                    (-2*s12*(-2*gm**2 - 9*m**2 + &
                        2*(s12 + 2*s13 + 2*s14 + s24)) - &
                      3*(2*m**4 + s14*s23 + s13*s24 - &
                         m**2*(s13 + s14 + s23 + s24))) - &
                   gm**2*s12*(12*m**6 + &
                      2*m**4*(-38*s12 - 3*(s13 + s14 + s23 + s24)) - &
                      4*s12*(s13**2 + s14**2 + 2*s13*s23 + 2*s14*s23 + &
                         s23**2 + 2*s13*s24 + 2*s14*s24 + s24**2 - &
                         gm**2*(s13 + s14 + s23 + s24) + &
                         s12*(s13 + s14 + s23 + s24)) + &
                      m**2*(-22*gm**2*s12 + &
                         6*(s12**2 + s14*s23 + s13*s24 + &
                         s12*(6*s13 + 6*s14 + 4*s23 + 5*s24))))))/2.))/&
          ((gm**2 + m**2 - s12 - s13 - s14)*&
            (gm**2 + m**2 - s12 - s23 - s24)))/&
       (-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)**2 + &
      (2*(56*gm**8*s12**2 - 4*gm**6*s12*&
            (-48*m**4 + 28*s12**2 - 7*s13**2 - 12*s13*s14 - 7*s14**2 + &
              2*s14*s23 - 7*s23**2 + 2*s13*s24 - 12*s23*s24 - 7*s24**2 + &
              2*s12*(15*s13 + 15*s14 + 7*s23 + 11*s24) - &
              8*m**2*(14*s12 - 3*(s13 + s14 + s23 + s24))) - &
           4*gm**4*(-416*m**6*s12 - 14*s12**4 - &
              2*s12**3*(13*s13 + 13*s14 + 3*s23 + 8*s24) - &
              2*(s14*s23 - s13*s24)**2 + &
              s12**2*(s13**2 + s14**2 + 13*s23**2 + &
                 12*s13*(s14 - s23 - 2*s24) + 30*s23*s24 + 7*s24**2 - &
                 18*s14*(s23 + s24)) - &
              2*m**4*(8*s12**2 + (s13 - s14 - s23 + s24)**2 - &
                 4*s12*(37*s13 + 37*s14 + 33*s23 + 35*s24)) + &
              s12*(12*s13**3 + 12*s14**3 + 6*s23**3 + 7*s14**2*s24 + &
                 27*s23**2*s24 + 30*s23*s24**2 + 9*s24**3 + &
                 s13**2*(42*s14 + 4*s23 + 3*s24) + &
                 2*s14*(5*s23**2 + 12*s23*s24 + 6*s24**2) + &
                 2*s13*(21*s14**2 + 7*s23**2 + 12*s23*s24 + 4*s24**2 + &
                    3*s14*(s23 + 2*s24))) + &
              4*m**2*(20*s12**3 + 6*s12**2*(s13 + s14 - s23) + &
                 s14*s23*(s14 + s23 - s24) + s13**2*s24 - &
                 s13*((s23 - s24)*s24 + s14*(s23 + s24)) - &
                 2*s12*(12*s13**2 + 12*s14**2 + 7*s14*s23 + 10*s23**2 + &
                    10*s14*s24 + 23*s23*s24 + 11*s24**2 + &
                    s13*(26*s14 + 9*s23 + 8*s24)))) - &
           2*gm**2*(-1280*m**8*s12 + &
              4*s12**4*(2*s13 + 2*s14 - 8*s23 - 3*s24) + &
              8*(s13 + s14 + s23 + s24)*(s14*s23 - s13*s24)**2 - &
              8*s12**3*(2*s13**2 + 2*s14**2 + 6*s23**2 + &
                 s13*(7*s14 + 5*s23 - 2*s24) + 3*s14*s24 + 13*s23*s24 + &
                 4*s24**2) - 32*m**6*&
               (-56*s12**2 + (s13 - s14 - s23 + s24)**2 - &
                 2*s12*(19*s13 + 19*s14 + 17*s23 + 18*s24)) + &
              s12*(s13 + s14 + s23 + s24)*&
               (-12*s13**3 - 12*s14**3 - &
                 6*s24*(s23 + s24)*(3*s23 + s24) + &
                 2*s14**2*(12*s23 + s24) + &
                 s13**2*(-48*s14 + 8*s23 + 18*s24) - &
                 4*s13*(12*s14**2 - 3*s14*s23 + 5*s23**2 + 9*s23*s24 - &
                    s24**2) - 4*s14*(s23**2 + 9*s23*s24 + 3*s24**2)) - &
              2*s12**2*(15*s13**3 + 15*s14**3 + 9*s23**3 + &
                 s13**2*(65*s14 + 9*s23 - 10*s24) + 50*s23**2*s24 + &
                 53*s23*s24**2 + 12*s24**3 + s14**2*(-13*s23 + 12*s24) + &
                 s14*(9*s23**2 + 48*s23*s24 + 23*s24**2) + &
                 s13*(65*s14**2 + 31*s23**2 + 48*s23*s24 + s24**2 + &
                    6*s14*(2*s23 + 3*s24))) + &
              8*m**4*(-104*s12**3 + s13**3 + s14**3 - &
                 s13**2*(s14 + s23 - 11*s24) + s14**2*(11*s23 - s24) + &
                 (s23 - s24)**2*(s23 + s24) - &
                 2*s12**2*(70*s13 + 70*s14 + 72*s23 + 71*s24) + &
                 s14*(11*s23**2 - 10*s23*s24 - s24**2) - &
                 s13*(s14**2 + s23**2 + 10*s23*s24 - 11*s24**2 + &
                    10*s14*(s23 + s24)) - &
                 2*s12*(29*s13**2 + 29*s14**2 + 28*s14*s23 + 23*s23**2 + &
                    47*s14*s24 + 65*s23*s24 + 26*s24**2 + &
                    s13*(74*s14 + 44*s23 + 31*s24))) - &
              4*m**2*(-32*s12**4 - &
                 4*s12**3*(15*s13 + 15*s14 + 23*s23 + 19*s24) - &
                 s12**2*(69*s13**2 + 69*s14**2 + 50*s14*s23 + 73*s23**2 + &
                    92*s14*s24 + 180*s23*s24 + 71*s24**2 + &
                    2*s13*(87*s14 + 47*s23 + 24*s24)) + &
                 4*(s13**3*s24 + &
                    s14*s23*(s14**2 + 4*s14*s23 + s23**2 - s24**2) - &
                    s13*s24*(s14**2 + 8*s14*s23 + s23**2 - s24**2) + &
                    s13**2*(-(s14*s23) + 4*s24**2)) - &
                 s12*(27*s13**3 + 27*s14**3 + 11*s23**3 + 69*s23**2*s24 + &
                    77*s23*s24**2 + 19*s24**3 + &
                    s13**2*(109*s14 + 25*s23 + s24) + &
                    s14**2*(-7*s23 + 33*s24) + &
                    s13*(109*s14**2 + 54*s14*s23 + 49*s23**2 + &
                       70*s14*s24 + 98*s23*s24 + 13*s24**2) + &
                    s14*(17*s23**2 + 98*s23*s24 + 45*s24**2)))) - &
           (2*s12*(-24*gm**8*s12**2 + &
                2*gm**6*s12*(16*m**4 + 24*s12**2 - 4*s13**2 - &
                   8*s13*s14 - 4*s14**2 + 5*s13*s23 + 11*s14*s23 + &
                   11*s13*s24 + 5*s14*s24 + &
                   s12*(32*s13 + 32*s14 + 14*s23 + 23*s24) - &
                   8*m**2*(13*s12 + 2*(s23 + s24))) - &
                2*(-2*m**2 + s12 + s13 + s14)**2*&
                 (64*m**6*s12 + 4*s12**3*(s13 + s14 - s23) - &
                   s13**2*s14*s23 + s14**3*s23 + 2*s14**2*s23**2 + &
                   s14*s23**3 + s13**3*s24 - s13*s14**2*s24 - &
                   4*s13*s14*s23*s24 - s13*s23**2*s24 + &
                   2*s13**2*s24**2 - s14*s23*s24**2 + s13*s24**3 - &
                   s12**2*(-3*s13**2 - 3*s14**2 + &
                      2*s13*(-3*s14 + s23 - 5*s24) - &
                      2*s14*(3*s23 + s24) + (s23 + s24)*(5*s23 + s24)) - &
                   4*m**4*(16*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(s13 + s14 + 3*s23 + 2*s24)) + &
                   m**2*(16*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 - &
                      7*s14*s23**2 - s23**3 + &
                      s13**2*(s14 + s23 - 7*s24) + s14**2*s24 + &
                      6*s14*s23*s24 + s23**2*s24 + s14*s24**2 + &
                      s23*s24**2 - s24**3 + 16*s12**2*(2*s23 + s24) + &
                      8*s12*(2*s13*s23 - 2*s14*s23 + 2*s23**2 - &
                        3*s13*s24 + s14*s24 + 3*s23*s24 + s24**2) + &
                      s13*(s14**2 + s23**2 + 6*s23*s24 - 7*s24**2 + &
                         6*s14*(s23 + s24))) - &
                   s12*(s13**3 + s14**3 + s13**2*(3*s14 - s23 - 9*s24) - &
                      s14*(s23 - 3*s24)*(s23 + s24) + (s23 + s24)**3 - &
                      s14**2*(9*s23 + s24) + &
                      s13*(3*s14**2 - 10*s14*(s23 + s24) + &
                         (7*s23 - 5*s24)*(s23 + s24)))) + &
                gm**2*(2*m**2 - s12 - s13 - s14)*&
                 (224*m**6*s12 - 2*s12**3*(4*s13 + 4*s14 + 5*s24) + &
                   2*(s14*s23 - s13*s24)*&
                    (-s13**2 + s14**2 - 4*s13*s23 - s23**2 + &
                      4*s14*s24 + s24**2) + &
                   2*s12**2*(5*s13**2 + 5*s14**2 - 5*s23**2 + &
                      2*s13*(5*s14 - 5*s23 - 11*s24) - 2*s23*s24 - &
                      9*s24**2 - 4*s14*(5*s23 + 3*s24)) - &
                   2*m**4*(32*s12**2 - &
                      6*(s13 - s14 + s23 - s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(-3*s13 - 3*s14 + 39*s23 + 40*s24)) - &
                   s12*(-18*s13**3 - 18*s14**3 + &
                      s14**2*(22*s23 + 6*s24) + &
                      s13**2*(-54*s14 + 12*s23 + 16*s24) + &
                      2*(s23 + s24)*(5*s23**2 - 2*s23*s24 + 5*s24**2) + &
                      2*s14*(9*s23**2 + 5*s23*s24 + 10*s24**2) + &
                      s13*(-54*s14**2 + 54*s14*s23 + 12*s23**2 + &
                         42*s14*s24 + 10*s23*s24 + 26*s24**2)) + &
                   2*m**2*(-12*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 + &
                      7*s14*s23**2 + s23**3 + &
                      s13**2*(s14 - 3*s23 - 7*s24) - 3*s14**2*s24 - &
                      10*s14*s23*s24 - s23**2*s24 + 3*s14*s24**2 - &
                      s23*s24**2 + s24**3 + &
                      s13*(s14**2 + (3*s23 - 7*s24)*(s23 - s24) + &
                         10*s14*(s23 + s24)) - &
                      2*s12**2*(s13 + s14 - 3*(7*s23 + 9*s24)) + &
                      s12*(-45*s13**2 - 45*s14**2 + 80*s14*s23 + &
                         41*s23**2 + 60*s14*s24 + 38*s23*s24 + &
                         49*s24**2 + s13*(-70*s14 + 64*s23 + 76*s24)))) + &
                gm**4*(224*m**6*s12 - 24*s12**4 - &
                   4*s12**3*(16*s13 + 16*s14 + 9*s23 + 14*s24) + &
                   2*(s13 + s14)*(2*s13 - 2*s14 + s23 - s24)*&
                    (-(s14*s23) + s13*s24) - &
                   2*m**4*(296*s12**2 - &
                      2*(2*s13 - 2*s14 + s23 - s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(8*s13 + 8*s14 + 32*s23 + 35*s24)) - &
                   2*s12**2*(8*s13**2 + 8*s14**2 + 45*s14*s23 + &
                      10*s23**2 + 44*s14*s24 + 14*s23*s24 + 16*s24**2 + &
                      s13*(16*s14 + 37*s23 + 52*s24)) - &
                   s12*(-24*s13**3 + &
                      2*s14*(-12*s14**2 + 19*s14*s23 + 5*s23**2 + &
                         13*s14*s24 + 13*s23*s24 + 10*s24**2) + &
                      s13*(-72*s14**2 + 90*s14*s23 + 8*s23**2 + &
                         78*s14*s24 + 26*s23*s24 + 22*s24**2) - &
                      8*s13**2*(9*s14 - 4*(s23 + s24))) + &
                   2*m**2*(108*s12**3 - 2*s13**3 + &
                      s13**2*(2*s14 + s23 - 5*s24) + &
                      26*s12**2*(5*s13 + 5*s14 + 5*s23 + 6*s24) + &
                      s14*(-2*s14**2 + 3*s23**2 - 4*s23*s24 + s24**2 + &
                         s14*(-5*s23 + s24)) + &
                      s13*(2*s14**2 + s23**2 - 4*s23*s24 + 3*s24**2 + &
                         4*s14*(s23 + s24)) + &
                      s12*(-41*s13**2 - 41*s14**2 + 108*s14*s23 + &
                         9*s23**2 + 100*s14*s24 + 26*s23*s24 + &
                         21*s24**2 + s13*(-62*s14 + 100*s23 + 108*s24)))))&
)/(-gm**2 - m**2 + s12 + s13 + s14) + &
           (2*s12*(-24*gm**8*s12**2 + &
                2*gm**6*s12*(16*m**4 + 24*s12**2 - &
                   8*m**2*(13*s12 + 2*(s13 + s14)) + 5*s13*s23 + &
                   11*s14*s23 - 4*s23**2 + 11*s13*s24 + 5*s14*s24 - &
                   8*s23*s24 - 4*s24**2 + &
                   s12*(32*s13 + 32*s14 + 14*s23 + 23*s24)) - &
                2*(-2*m**2 + s12 + s23 + s24)**2*&
                 (64*m**6*s12 + 4*s12**3*(s13 + s14 - s23) - &
                   s13**2*s14*s23 + s14**3*s23 + 2*s14**2*s23**2 + &
                   s14*s23**3 + s13**3*s24 - s13*s14**2*s24 - &
                   4*s13*s14*s23*s24 - s13*s23**2*s24 + &
                   2*s13**2*s24**2 - s14*s23*s24**2 + s13*s24**3 - &
                   s12**2*(-3*s13**2 - 3*s14**2 + &
                      2*s13*(-3*s14 + s23 - 5*s24) - &
                      2*s14*(3*s23 + s24) + (s23 + s24)*(5*s23 + s24)) - &
                   4*m**4*(16*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(s13 + s14 + 3*s23 + 2*s24)) + &
                   m**2*(16*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 - &
                      7*s14*s23**2 - s23**3 + &
                      s13**2*(s14 + s23 - 7*s24) + s14**2*s24 + &
                      6*s14*s23*s24 + s23**2*s24 + s14*s24**2 + &
                      s23*s24**2 - s24**3 + 16*s12**2*(2*s23 + s24) + &
                      8*s12*(2*s13*s23 - 2*s14*s23 + 2*s23**2 - &
                        3*s13*s24 + s14*s24 + 3*s23*s24 + s24**2) + &
                      s13*(s14**2 + s23**2 + 6*s23*s24 - 7*s24**2 + &
                         6*s14*(s23 + s24))) - &
                   s12*(s13**3 + s14**3 + s13**2*(3*s14 - s23 - 9*s24) - &
                      s14*(s23 - 3*s24)*(s23 + s24) + (s23 + s24)**3 - &
                      s14**2*(9*s23 + s24) + &
                      s13*(3*s14**2 - 10*s14*(s23 + s24) + &
                         (7*s23 - 5*s24)*(s23 + s24)))) + &
                gm**2*(2*m**2 - s12 - s23 - s24)*&
                 (224*m**6*s12 - &
                   2*s12**3*(10*s13 + 10*s14 - 6*s23 - s24) - &
                   2*(s14*s23 - s13*s24)*&
                    (-s13**2 + s14**2 - 4*s13*s23 - s23**2 + &
                      4*s14*s24 + s24**2) - &
                   2*m**4*(32*s12**2 + &
                      4*s12*(41*s13 + 41*s14 - 5*s23 - 4*s24) + &
                      6*(s13 - s14 + s23 - s24)*(s13 - s14 - s23 + s24)) &
- 2*s12**2*(13*s13**2 + 13*s14**2 - 9*s23**2 - 16*s23*s24 - 7*s24**2 + &
                      2*s14*(8*s23 + 5*s24) + &
                      2*s13*(7*s14 + 3*s23 + 10*s24)) - &
                   s12*(10*s13**3 + 10*s14**3 - &
                      6*(s23 + s24)**2*(s23 + 2*s24) + &
                      s14**2*(34*s23 + 28*s24) + &
                      s13**2*(6*s14 + 28*s23 + 34*s24) + &
                      s14*(-6*s23**2 + 6*s23*s24 - 8*s24**2) + &
                      2*s13*(3*s14**2 - 8*s23**2 + 3*s23*s24 + s24**2 + &
                         17*s14*(s23 + s24))) + &
                   2*m**2*(-12*s12**3 + s13**3 + s14**3 + 7*s14**2*s23 - &
                      7*s14*s23**2 - s23**3 + &
                      2*s12**2*(33*s13 + 33*s14 - 13*s23 - 7*s24) + &
                      3*s14**2*s24 + 10*s14*s23*s24 + s23**2*s24 - &
                      3*s14*s24**2 + s23*s24**2 - s24**3 + &
                      s13**2*(-s14 + 3*s23 + 7*s24) - &
                      s13*(s14**2 + 3*s23**2 - 10*s23*s24 + 7*s24**2 + &
                         10*s14*(s23 + s24)) + &
                      s12*(57*s13**2 + 57*s14**2 + 56*s14*s23 - &
                         37*s23**2 + 48*s14*s24 - 58*s23*s24 - &
                         41*s24**2 + s13*(62*s14 + 40*s23 + 64*s24)))) + &
                gm**4*(224*m**6*s12 - 24*s12**4 - &
                   4*s12**3*(19*s13 + 19*s14 + 6*s23 + 11*s24) + &
                   2*(s13 - s14 + 2*s23 - 2*s24)*(s23 + s24)*&
                    (s14*s23 - s13*s24) - &
                   2*m**4*(296*s12**2 + &
                      2*(s13 - s14 + 2*s23 - 2*s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(38*s13 + 38*s14 + 2*s23 + 5*s24)) - &
                   2*s12**2*(22*s13**2 + 22*s14**2 + 47*s14*s23 - &
                      6*s23**2 + 45*s14*s24 - 5*s23*s24 + s24**2 + &
                      s13*(32*s14 + 39*s23 + 53*s24)) + &
                   2*m**2*(108*s12**3 + 3*s14**2*s23 - 5*s14*s23**2 - &
                      2*s23**3 + s14**2*s24 + 4*s14*s23*s24 + &
                      2*s23**2*s24 + s14*s24**2 + 2*s23*s24**2 - &
                      2*s24**3 + s13**2*(s23 + 3*s24) + &
                      26*s12**2*(7*s13 + 7*s14 + 3*s23 + 4*s24) + &
                      s13*(-4*s14*(s23 + s24) + &
                         (s23 - s24)*(s23 + 5*s24)) + &
                      s12*(33*s13**2 + 33*s14**2 + 84*s14*s23 - &
                         41*s23**2 + 88*s14*s24 - 62*s23*s24 - &
                         41*s24**2 + s13*(62*s14 + 76*s23 + 96*s24))) - &
                   s12*(s13**2*(32*s23 + 34*s24) + &
                      2*s13*(-2*s23**2 + 15*s23*s24 + 7*s24**2 + &
                         31*s14*(s23 + s24)) + &
                      2*(-3*(s23 + s24)**2*(2*s23 + 3*s24) + &
                         s14**2*(17*s23 + 16*s24) + &
                         s14*(s23**2 + 15*s23*s24 + 4*s24**2))))))/&
            (-gm**2 - m**2 + s12 + s23 + s24) + &
           2*(1024*m**10*s12 + 16*s12**5*(s13 + s14 - s23) - &
              4*s12**4*(-7*s13**2 - 7*s14**2 + &
                 2*s13*(-7*s14 + s23 - 7*s24) - 6*s14*(s23 + s24) + &
                 (s23 + s24)*(9*s23 + s24)) - &
              64*m**8*(32*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                 4*s12*(3*s13 + 3*s14 + 5*s23 + 4*s24)) - &
              4*s12**3*(-3*s13**3 - 3*s14**3 + &
                 s14*(-s23 + s24)*(s23 + s24) + &
                 (s23 + s24)**2*(7*s23 + 2*s24) - &
                 3*s13**2*(3*s14 + s23 + 8*s24) - &
                 s14**2*(19*s23 + 8*s24) - &
                 s13*(9*s14**2 + 22*s14*s23 - 15*s23**2 + 32*s14*s24 + &
                    15*s24**2)) - &
              2*s12*(s13 + s14 + s23 + s24)**2*&
               (s13**3 + s14**3 + s13**2*(s14 - s23 - 7*s24) - &
                 s14**2*(7*s23 + s24) + (s23 + s24)*(s23**2 + s24**2) + &
                 s14*(-3*s23**2 + 4*s23*s24 + s24**2) + &
                 s13*(s14**2 + 3*s23**2 + 4*s23*s24 - 5*s24**2 - &
                    2*s14*(s23 + s24))) + &
              4*(s13**2*s24 - s14*s23*(s14 + s23 + s24) + &
                  s13*(s14*(-s23 + s24) + s24*(s23 + s24)))**2 + &
              32*m**6*(48*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 - &
                 7*s14*s23**2 - s23**3 + s13**2*(s14 + s23 - 7*s24) + &
                 s14**2*s24 + 6*s14*s23*s24 + s23**2*s24 + s14*s24**2 + &
                 s23*s24**2 - s24**3 + &
                 8*s12**2*(4*s13 + 4*s14 + 8*s23 + 6*s24) + &
                 s13*(s14**2 + s23**2 + 6*s23*s24 - 7*s24**2 + &
                    6*s14*(s23 + s24)) + &
                 4*s12*(s13**2 + s14**2 + 5*s23**2 + &
                    4*s13*(s14 + 2*s23) + 10*s23*s24 + 3*s24**2 + &
                    2*s14*(s23 + 3*s24))) - &
              2*s12**2*(s13 + s14 + s23 + s24)*&
               (s13**3 + s14**3 + 5*s23**3 + 11*s23**2*s24 + &
                 9*s23*s24**2 + 3*s24**3 - 5*s14**2*(5*s23 + s24) + &
                 s13*(s14**2 - 22*s14*s23 + 17*s23**2 - 26*s14*s24 + &
                    6*s23*s24 - 17*s24**2) + &
                 s14*(-5*s23**2 + 6*s23*s24 + 5*s24**2) + &
                 s13**2*(s14 - 3*(s23 + 9*s24))) - &
              4*m**4*(128*s12**4 - s13**4 - s14**4 - 20*s14**3*s23 - &
                 54*s14**2*s23**2 - 20*s14*s23**3 - s23**4 - &
                 20*s13**3*s24 + 2*s14**2*s24**2 + 20*s14*s23*s24**2 + &
                 2*s23**2*s24**2 - s24**4 + &
                 96*s12**3*(s13 + s14 + 3*s23 + 2*s24) + &
                 2*s13**2*(s14**2 + 10*s14*s23 + s23**2 - 27*s24**2) + &
                 4*s13*s24*(5*s14**2 + 26*s14*s23 + 5*s23**2 - &
                    5*s24**2) + &
                 16*s12**2*(s13**2 + s14**2 + 4*s14*s23 + 13*s23**2 + &
                    s13*(3*s14 + 15*s23 - 2*s24) + 9*s14*s24 + &
                    21*s23*s24 + 7*s24**2) + &
                 4*s12*(s13**3 + s14**3 + 11*s23**3 + &
                    s13**2*(7*s14 + 13*s23 - 28*s24) + 32*s23**2*s24 + &
                    27*s23*s24**2 + 6*s24**3 + s14**2*(-23*s23 + 8*s24) + &
                    s13*(7*s14**2 + 10*s14*s23 + 31*s23**2 + &
                       32*s23*s24 - 19*s24**2) + &
                    s14*(-5*s23**2 + 32*s23*s24 + 17*s24**2))) + &
              4*m**2*(16*s12**5 + 32*s12**4*(2*s23 + s24) + &
                 16*s12**3*(-s13**2 - s14**2 + &
                    s13*(-2*s14 + 4*s23 - 3*s24) + s14*s24 + &
                    (s23 + s24)*(5*s23 + 2*s24)) + &
                 2*s12**2*(-s13**3 - s14**3 - s14**2*(35*s23 + s24) + &
                    (s23 + s24)**2*(19*s23 + 9*s24) - &
                    3*s13**2*(s14 - 3*s23 + 15*s24) + &
                    s14*(s23**2 + 26*s23*s24 + 17*s24**2) - &
                    s13*(3*s14**2 + 18*s14*s23 - 45*s23**2 + 38*s14*s24 - &
                       26*s23*s24 + 27*s24**2)) + &
                 s12*(s13 + s14 + s23 + s24)*&
                  (3*s13**3 + 3*s14**3 + s13**2*(5*s14 + s23 - 37*s24) - &
                    s14**2*(35*s23 + s24) + &
                    (s23 + s24)*(7*s23**2 + 8*s23*s24 + 5*s24**2) + &
                    s14*(-15*s23**2 + 22*s23*s24 + 9*s24**2) + &
                    s13*(5*s14**2 + 21*s23**2 + 22*s23*s24 - 27*s24**2 - &
                       2*s14*(3*s23 + 5*s24))) - &
                 2*(s13**4*s24 + &
                    s13**3*(s14*(-s23 + s24) + s24*(s23 + 7*s24)) - &
                    s13**2*(s14**2*(s23 + s24) + &
                       s24*(s23**2 - 6*s23*s24 - 7*s24**2) + &
                       s14*(s23**2 + 13*s23*s24 - 6*s24**2)) + &
                    s14*s23*(s14**3 + (s23 - s24)*(s23 + s24)**2 + &
                       s14**2*(7*s23 + s24) + &
                       s14*(7*s23**2 + 6*s23*s24 - s24**2)) + &
                    s13*(s14**3*(s23 - s24) - &
                       (s23 - s24)*s24*(s23 + s24)**2 + &
                       s14**2*(6*s23**2 - 13*s23*s24 - s24**2) + &
                       s14*(s23**3 - 13*s23**2*s24 - 13*s23*s24**2 + &
                         s24**3))))) - &
           ((-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (-24*gm**8*s12*(-2*m**2 + 2*s12 + s14 + s24) + &
                4*gm**6*(96*m**4*s12 + 24*s12**3 + &
                   s12**2*(38*s13 + 56*s14 + 8*s23 + 41*s24) + &
                   6*(s14 - s24)*(s14*s23 - s13*s24) + &
                   s12*(17*s13*s14 + 20*s14**2 + 11*s14*s23 + &
                      29*s13*s24 + 43*s14*s24 - s23*s24 + 11*s24**2) - &
                   2*m**2*(64*s12**2 + &
                      3*(s14 - s24)*(-s13 + s14 + s23 - s24) + &
                      s12*(17*s13 + 53*s14 - s23 + 44*s24))) - &
                4*(-2*m**2 + s12 + s14 + s24)**2*&
                 (64*m**6*s12 + 4*s12**3*(s13 + s14 - s23) - &
                   s13**2*s14*s23 + s14**3*s23 + 2*s14**2*s23**2 + &
                   s14*s23**3 + s13**3*s24 - s13*s14**2*s24 - &
                   4*s13*s14*s23*s24 - s13*s23**2*s24 + &
                   2*s13**2*s24**2 - s14*s23*s24**2 + s13*s24**3 - &
                   s12**2*(-3*s13**2 - 3*s14**2 + &
                      2*s13*(-3*s14 + s23 - 5*s24) - &
                      2*s14*(3*s23 + s24) + (s23 + s24)*(5*s23 + s24)) - &
                   4*m**4*(16*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(s13 + s14 + 3*s23 + 2*s24)) + &
                   m**2*(16*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 - &
                      7*s14*s23**2 - s23**3 + &
                      s13**2*(s14 + s23 - 7*s24) + s14**2*s24 + &
                      6*s14*s23*s24 + s23**2*s24 + s14*s24**2 + &
                      s23*s24**2 - s24**3 + 16*s12**2*(2*s23 + s24) + &
                      8*s12*(2*s13*s23 - 2*s14*s23 + 2*s23**2 - &
                        3*s13*s24 + s14*s24 + 3*s23*s24 + s24**2) + &
                      s13*(s14**2 + s23**2 + 6*s23*s24 - 7*s24**2 + &
                         6*s14*(s23 + s24))) - &
                   s12*(s13**3 + s14**3 + s13**2*(3*s14 - s23 - 9*s24) - &
                      s14*(s23 - 3*s24)*(s23 + s24) + (s23 + s24)**3 - &
                      s14**2*(9*s23 + s24) + &
                      s13*(3*s14**2 - 10*s14*(s23 + s24) + &
                         (7*s23 - 5*s24)*(s23 + s24)))) + &
                gm**4*(896*m**6*s12 - 48*s12**4 - &
                   8*s12**3*(22*s13 + 31*s14 + 20*s24) - &
                   2*(s14*s23 - s13*s24)*&
                    (9*s13**2 + 23*s14**2 - 10*s14*s23 + 9*s23**2 + &
                      s13*(34*s14 - 18*s23 - 17*s24) - 9*s14*s24 - &
                      7*s23*s24 - 14*s24**2) - &
                   8*m**4*(180*s12**2 - &
                      (2*s13 + 21*s14 - 2*s23 - 21*s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(29*s13 + 55*s14 - s23 + 40*s24)) - &
                   4*s12**2*(28*s13**2 + 62*s14**2 - 2*s23**2 - &
                      2*s23*s24 + 31*s24**2 + 39*s14*(s23 + 3*s24) + &
                      s13*(75*s14 + 26*s23 + 86*s24)) + &
                   2*s12*(9*s13**3 - 21*s14**3 - 9*s23**3 - &
                      2*s23**2*s24 + 13*s23*s24**2 - 6*s24**3 - &
                      s13**2*(5*s14 + 21*s23 + 52*s24) - &
                      s14**2*(83*s23 + 114*s24) + &
                      s14*(17*s23**2 - 24*s23*s24 - 81*s24**2) - &
                      s13*(23*s14**2 + 86*s14*s23 - 21*s23**2 + &
                         144*s14*s24 + 26*s23*s24 + 83*s24**2)) + &
                   2*m**2*(256*s12**3 - 9*s13**3 + 23*s14**3 + &
                      97*s14**2*s23 - 9*s14*s23**2 + 9*s23**3 + &
                      s13**2*(-25*s14 + 27*s23) - 32*s14**2*s24 - &
                      90*s14*s23*s24 - 16*s23**2*s24 - 5*s14*s24**2 - &
                      7*s23*s24**2 + 14*s24**3 + &
                      8*s12**2*(59*s13 + 86*s14 + 9*s23 + 61*s24) + &
                      s13*(11*s14**2 + 34*s14*s23 - 27*s23**2 - &
                         126*s14*s24 + 16*s23*s24 + 115*s24**2) + &
                      2*s12*(40*s13**2 + 154*s14**2 + 124*s14*s23 - &
                         14*s23**2 + 295*s14*s24 + 5*s23*s24 + &
                         85*s24**2 + s13*(170*s14 + 26*s23 + 235*s24)))) &
+ gm**2*(640*m**8*s12 - 8*m**6*&
                    (72*s12**2 - &
                      2*(3*s13 + 7*s14 - 3*s23 - 7*s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(25*s13 + 43*s14 + 3*s23 + 32*s24)) - &
                   4*m**2*(-4*s12**4 + 5*s14**4 + 19*s14**3*s23 - &
                      19*s14**2*s23**2 + 3*s14*s23**3 - 3*s14**3*s24 - &
                      3*s14**2*s23*s24 - 13*s14*s23**2*s24 + &
                      s23**3*s24 - 7*s14**2*s24**2 - 13*s14*s23*s24**2 + &
                      3*s14*s24**3 - 3*s23*s24**3 + 2*s24**4 - &
                      5*s13**3*(s14 + 3*s24) + &
                      s12**3*(94*s13 + 98*s14 - 38*s23 + 32*s24) + &
                      s13**2*&
                       (-3*s14**2 + 21*s14*s23 - 31*s14*s24 + &
                         23*s23*s24 + 2*s24**2) + &
                      s12**2*&
                       (53*s13**2 + 109*s14**2 + 98*s14*s23 - &
                         19*s23**2 + 226*s14*s24 - 66*s23*s24 + &
                         29*s24**2 + 2*s13*(65*s14 + 21*s23 + 111*s24)) &
+ s13*(3*s14**3 + s14**2*(34*s23 - 25*s24) + &
                         s14*(-19*s23**2 + 20*s23*s24 + 3*s24**2) + &
                         s24*(-9*s23**2 + 10*s23*s24 + 19*s24**2)) + &
                      s12*(-6*s13**3 + 7*s14**3 + 6*s23**3 - &
                         7*s23**2*s24 - 40*s23*s24**2 - 7*s24**3 + &
                         s13**2*(3*s14 + 52*s23 + 65*s24) + &
                         s14**2*(144*s23 + 113*s24) + &
                         2*s13*&
                         (-2*s14**2 + 70*s14*s23 - 14*s23**2 + &
                         87*s14*s24 + 19*s23*s24 + 65*s24**2) + &
                         s14*(-25*s23**2 + 40*s23*s24 + 77*s24**2))) - &
                   (s12 + s14 + s24)*&
                    (-4*s12**3*(10*s13 + 16*s14 - 12*s23 + 5*s24) - &
                      4*s12**2*&
                       (7*s13**2 + 14*s13*s14 + 13*s14**2 + &
                         14*s14*s23 - 7*s23**2 + 29*s13*s24 + &
                         27*s14*s24 - 15*s23*s24 + 2*s24**2) - &
                      s12*(2*s13**3 - 18*s14**3 + &
                         s14**2*(98*s23 + 52*s24) + &
                         s13**2*(-38*s14 + 70*s23 + 56*s24) - &
                         2*s13*&
                        (29*s14**2 - 64*s14*s23 + 11*s23**2 - &
                        66*s14*s24 + 8*s23*s24 - 23*s24**2) + &
                         2*(s23 + s24)*&
                        (7*s23**2 - 11*s23*s24 - 6*s24**2) + &
                         6*s14*(-5*s23**2 + s24**2)) - &
                      4*(s14*s23 - s13*s24)*&
                       (5*s13**2 + 5*s14**2 + s23**2 + s23*s24 - &
                         2*s24**2 - 3*s14*(2*s23 + s24) + &
                         s13*(8*s14 - 3*(2*s23 + s24)))) + &
                   4*m**4*(24*s12**3 + &
                      4*s12**2*(62*s13 + 76*s14 - 4*s23 + 43*s24) - &
                      2*(5*s13**3 - 10*s14**3 + &
                         s14*(2*s23 + s24)*(6*s23 + 4*s24) + &
                         s13**2*(8*s14 - 11*s23 + 9*s24) + &
                         s14**2*(-17*s23 + 13*s24) - &
                         (s23 - s24)*(s23**2 - 4*s23*s24 - 7*s24**2) - &
                         s13*(3*s14**2 + 20*s14*s23 - 7*s23**2 - &
                         26*s14*s24 + 14*s23*s24 + 23*s24**2)) + &
                      4*s12*(14*s13**2 + 39*s14**2 + 55*s14*s23 - &
                         8*s23**2 + 82*s14*s24 - 6*s23*s24 + 21*s24**2 + &
                         s13*(41*s14 + 20*(s23 + 4*s24)))))))/&
            (-2*m**2 + s12 + s14 + s24) - &
           ((-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)*&
              (24*gm**8*s12*(-2*m**2 + 2*s12 + s13 + s23) - &
                4*gm**6*(96*m**4*s12 + 24*s12**3 + &
                   s12**2*(56*s13 + 38*s14 + 26*s23 + 23*s24) + &
                   6*(s13 - s23)*(-(s14*s23) + s13*s24) - &
                   2*m**2*(64*s12**2 + &
                      3*(s13 - s23)*(s13 - s14 - s23 + s24) + &
                      s12*(53*s13 + 17*s14 + 35*s23 + 8*s24)) + &
                   s12*(20*s13**2 + s23*(29*s14 + 2*s23 + 8*s24) + &
                      s13*(17*s14 + 34*s23 + 20*s24))) + &
                4*(-2*m**2 + s12 + s13 + s23)**2*&
                 (64*m**6*s12 + 4*s12**3*(s13 + s14 - s23) - &
                   s13**2*s14*s23 + s14**3*s23 + 2*s14**2*s23**2 + &
                   s14*s23**3 + s13**3*s24 - s13*s14**2*s24 - &
                   4*s13*s14*s23*s24 - s13*s23**2*s24 + 2*s13**2*s24**2 - &
                   s14*s23*s24**2 + s13*s24**3 - &
                   s12**2*(-3*s13**2 - 3*s14**2 + &
                      2*s13*(-3*s14 + s23 - 5*s24) - &
                      2*s14*(3*s23 + s24) + (s23 + s24)*(5*s23 + s24)) - &
                   4*m**4*(16*s12**2 - (s13 - s14 - s23 + s24)**2 + &
                      4*s12*(s13 + s14 + 3*s23 + 2*s24)) + &
                   m**2*(16*s12**3 - s13**3 - s14**3 - 7*s14**2*s23 - &
                      7*s14*s23**2 - s23**3 + &
                      s13**2*(s14 + s23 - 7*s24) + s14**2*s24 + &
                      6*s14*s23*s24 + s23**2*s24 + s14*s24**2 + &
                      s23*s24**2 - s24**3 + 16*s12**2*(2*s23 + s24) + &
                      8*s12*(2*s13*s23 - 2*s14*s23 + 2*s23**2 - &
                         3*s13*s24 + s14*s24 + 3*s23*s24 + s24**2) + &
                      s13*(s14**2 + s23**2 + 6*s23*s24 - 7*s24**2 + &
                         6*s14*(s23 + s24))) - &
                   s12*(s13**3 + s14**3 + s13**2*(3*s14 - s23 - 9*s24) - &
                      s14*(s23 - 3*s24)*(s23 + s24) + (s23 + s24)**3 - &
                      s14**2*(9*s23 + s24) + &
                      s13*(3*s14**2 - 10*s14*(s23 + s24) + &
                         (7*s23 - 5*s24)*(s23 + s24)))) + &
                gm**4*(-896*m**6*s12 + 48*s12**4 + &
                   8*s12**3*(31*s13 + 22*s14 + 9*s23 + 11*s24) - &
                   2*(s14*s23 - s13*s24)*&
                    (23*s13**2 + 9*s14**2 - 26*s14*s23 - 5*s23**2 + &
                      s13*(34*s14 - 18*s23 - s24) - 9*s14*s24 - 7*s23*s24&
) + 8*m**4*(180*s12**2 + (21*s13 + 2*s14 - 21*s23 - 2*s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(55*s13 + 29*s14 + 25*s23 + 14*s24)) + &
                   4*s12**2*(62*s13**2 + 28*s14**2 + 71*s14*s23 + &
                      41*s14*s24 + 14*s23*s24 + 13*s24**2 + &
                      s13*(75*s14 + 86*s23 + 70*s24)) + &
                   2*s12*(21*s13**3 - 9*s14**3 + &
                      s14**2*(61*s23 + 12*s24) + &
                      s13**2*(23*s14 + 99*s23 + 98*s24) + &
                      s14*(53*s23**2 + 44*s23*s24 - 9*s24**2) + &
                      s23*(-9*s23**2 - 4*s23*s24 + 17*s24**2) + &
                      s13*(5*s14**2 + 33*s23**2 + 42*s23*s24 + &
                         13*s24**2 + 46*s14*(3*s23 + 2*s24))) - &
                   2*m**2*(256*s12**3 + 23*s13**3 - 9*s14**3 + &
                      9*s14**2*s23 + 115*s14*s23**2 + 5*s23**3 + &
                      18*s14**2*s24 - 2*s14*s23*s24 + 2*s23**2*s24 - &
                      9*s14*s24**2 - 7*s23*s24**2 + &
                      8*s12**2*(86*s13 + 59*s14 + 36*s23 + 34*s24) + &
                      s13**2*(11*s14 - 41*s23 + 106*s24) - &
                      s13*(25*s14**2 + 126*s14*s23 - 13*s23**2 - &
                         34*s14*s24 + 108*s23*s24 + 9*s24**2) + &
                      2*s12*(154*s13**2 + 40*s14**2 + 208*s14*s23 + &
                         16*s23**2 + 53*s14*s24 + 47*s23*s24 + &
                         13*s24**2 + s13*(170*s14 + 226*s23 + 193*s24)))) &
- gm**2*(640*m**8*s12 - 8*m**6*&
                    (72*s12**2 + &
                      2*(7*s13 + 3*s14 - 7*s23 - 3*s24)*&
                       (s13 - s14 - s23 + s24) + &
                      4*s12*(43*s13 + 25*s14 + 21*s23 + 14*s24)) + &
                   8*m**4*(12*s12**3 + 10*s13**3 - 5*s14**3 + 4*s23**3 - &
                      2*s23*s24**2 - 2*s24**3 + s14**2*(-6*s23 + 8*s24) + &
                      s13**2*(3*s14 - 16*s23 + 20*s24) + &
                      2*s12**2*(76*s13 + 62*s14 + 10*s23 + 29*s24) + &
                      s14*(23*s23**2 + 8*s23*s24 - s24**2) - &
                      2*s13*(4*s14**2 + 13*s14*s23 - s23**2 - &
                         10*s14*s24 + 10*s23*s24 + 6*s24**2) + &
                      2*s12*(39*s13**2 + 14*s14**2 + 69*s14*s23 + &
                         3*s23**2 + 31*s14*s24 + s23*s24 + 3*s24**2 + &
                         s13*(41*s14 + 64*s23 + 73*s24))) - &
                   (s12 + s13 + s23)*&
                    (-4*s12**3*(16*s13 + 10*s14 - 6*s23 - s24) - &
                      4*s12**2*&
                       (13*s13**2 + 7*s14**2 + 22*s14*s23 - 9*s23**2 + &
                         7*s14*s24 - 11*s23*s24 + &
                         s13*(14*s14 + 16*s23 + 25*s24)) - &
                      s12*(-18*s13**3 + 2*s14**3 + &
                         s14**2*(62*s23 + 64*s24) + &
                         s13**2*(-58*s14 + 58*s23 + 92*s24) - &
                         2*s13*&
                         (19*s14**2 - 72*s14*s23 + 17*s23**2 - &
                         58*s14*s24 - 5*s24**2) + &
                         (s23 + s24)*&
                        (-6*s23**2 - 22*s23*s24 + 8*s24**2) + &
                         2*s14*(3*s23**2 - 8*s23*s24 + 9*s24**2)) + &
                      4*(s14*s23 - s13*s24)*&
                       (5*s13**2 + 5*s14**2 + s23**2 + s23*s24 - &
                         2*s24**2 - 3*s14*(2*s23 + s24) + &
                         s13*(8*s14 - 3*(2*s23 + s24)))) - &
                   4*m**2*(-4*s12**4 + 5*s13**4 + &
                      s13**3*(3*s14 - 6*s23 + 22*s24) + &
                      s12**3*(98*s13 + 94*s14 - 34*s23 + 28*s24) - &
                      s13**2*(3*s14**2 + 25*s14*s23 + 4*s23**2 - &
                         34*s14*s24 + 12*s23*s24 + 13*s24**2) + &
                      s12**2*(109*s13**2 + 53*s14**2 + 186*s14*s23 - &
                         51*s23**2 + 78*s14*s24 - 22*s23*s24 + &
                         17*s24**2 + 2*s13*(65*s14 + 73*s23 + 89*s24)) + &
                      s23*(-15*s14**3 - (s23 - s24)**2*(s23 + 2*s24) + &
                         s14**2*(11*s23 + 14*s24) + &
                         s14*(13*s23**2 + 4*s23*s24 + 3*s24**2)) - &
                      s13*(5*s14**3 - 6*s23**3 + &
                         2*s14**2*(14*s23 - 9*s24) + 10*s23**2*s24 + &
                         10*s23*s24**2 + 6*s24**3 + &
                         s14*(-9*s23**2 - 2*s23*s24 + 7*s24**2)) + &
                      s12*(7*s13**3 - 6*s14**3 + &
                         s14**2*(71*s23 + 46*s24) + &
                         s13**2*(-4*s14 + 99*s23 + 158*s24) + &
                         s14*(88*s23**2 + 46*s23*s24 + 6*s24**2) + &
                         s23*(-21*s23**2 - 34*s23*s24 + 7*s24**2) + &
                         s13*(3*s14**2 + 27*s23**2 + 48*s23*s24 + &
                          17*s24**2 + 2*s14*(83*s23 + 74*s24)))))))/&
            (-2*m**2 + s12 + s13 + s23)))/&
       (s12**2*(-gm**2 - 4*m**2 + s12 + s13 + s14 + s23 + s24)**2)))/&
  (27.*gm**4)
